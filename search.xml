<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Code Review</title>
      <link href="/2018/03/18/2018-03-18-Code-Review/"/>
      <url>/2018/03/18/2018-03-18-Code-Review/</url>
      
        <content type="html"><![CDATA[<h1 id="Code-Review-是什么？"><a href="#Code-Review-是什么？" class="headerlink" title="Code Review 是什么？"></a>Code Review 是什么？</h1><p><img src="https://pbs.twimg.com/media/CgAbqE6W4AASmwe.jpg" alt="TheSecretToCodeQuality"></p><blockquote><p>wikipedia: Code review is systematic examination (sometimes referred to as peer review) of computer source code. It is intended to find mistakes overlooked in software development, improving the overall quality of software. </p></blockquote><ul><li>从公司文化和制度上看，Code Review做得最好的，当属Google了。</li><li>参考了国内的各大互联网公司，真正把代码评审落地得很好的不多，同样面临着各种问题。既要符合团队的口味，又要契合公司的文化，又不能舍本逐末。</li><li>code review是一种文化，不论对工程师而言还是对公司。</li></ul><h1 id="Code-Review-好处"><a href="#Code-Review-好处" class="headerlink" title="Code Review 好处"></a>Code Review 好处</h1><p><img src="https://www.ibm.com/developerworks/rational/library/11-proven-practices-for-peer-review/image001.gif" alt="DefectDensityVs.Loc"></p><ul><li>减少代码中的问题，提高下游个团队(QA, Ops, DM)的幸福感。</li><li>营造平等的氛围， 激发团队的积极性。</li><li>熟悉项目和产品的代码，熟悉团队的代码规范。</li></ul><h1 id="Code-Review-该怎么做？"><a href="#Code-Review-该怎么做？" class="headerlink" title="Code Review 该怎么做？"></a>Code Review 该怎么做？</h1><h2 id="代码评审-VS-项目进度"><a href="#代码评审-VS-项目进度" class="headerlink" title="代码评审 VS. 项目进度"></a>代码评审 VS. 项目进度</h2><ul><li><p>这两者不应该有矛盾，在大目标上应该是一致的。开发团队与项目管理需要达成共识。在操作上，时间进度，风控上要取得平衡，有时候也要特事特办。</p></li><li><p>个人比较赞同陈皓在<a href="https://coolshell.cn/articles/1302.html" target="_blank" rel="noopener">CODE REVIEW中的几个提示</a>的几个观点，也比较符合目前团队和公司。</p><ul><li>Code reviews不应该承担发现代码错误的职责<ul><li>代码中的bug应该由UT，CT, FT，PT来覆盖</li></ul></li><li>Code reviews不应该成为保证代码风格和编码标准的手段<ul><li>代码格式，风格应该通过线下的静态工具就可以分析，统一标准。</li></ul></li></ul></li><li>Code Review的实现思路</li><li>Code Review的meeting是很奢侈的，时间</li><li>Code Review的代码量</li></ul><h2 id="Code-Review-流程"><a href="#Code-Review-流程" class="headerlink" title="Code Review 流程"></a>Code Review 流程</h2><p><img src="https://www.checkmarx.com/wp-content/uploads/2016/02/Blog-Headers-6.png" alt="BestPracticesForThePerfectSecureCodeReview"></p><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p><img src="http://s2.quickmeme.com/img/0e/0ee676a657e4f108f1ff2c9a48d35b78823c2d8b9268922d6f5ace8fed9679fe.jpg" alt="largeReview"></p><ul><li>轻量化的review<ul><li>按照一定的度量，分步骤分批量review，比如User Story或者task，避免代码推到重做的风险。</li></ul></li><li>提升review效率<ol><li>时间允许的情况下，最好先offline review一下，准备下问题和comments。</li><li>可按以下方式进行review<br>a. Review设计思路<br>b. Review设计模式<br>c. Review框架代码<br>d. Review最终代码</li></ol></li></ul><h3 id="参与者"><a href="#参与者" class="headerlink" title="参与者"></a>参与者</h3><p><img src="http://mindbowser.com/wp-content/uploads/2016/07/Basic-Code-Reviewer-Code-Review-Checklist.png" alt="reviewer"></p><ul><li>key reviewers：他们的经验对于代码评审是至关重要的。有足够的key reviwer参与，才能更好提升评审的质量。</li><li>peer reviewers and teammates：他们随时会接手未完成的工作，同时也培养key reviwer接班人。</li><li>API Users：他们会关心最终给调用的API会是长什么样子的。</li><li>Ops team：他们能提出比较多线上的经验与如何收集问题现场的建议。</li></ul><h3 id="会议"><a href="#会议" class="headerlink" title="会议"></a>会议</h3><p><img src="https://image.slidesharecdn.com/hownottoruncodereviewspdf-141217143831-conversion-gate02/95/how-not-to-run-code-reviews-7-638.jpg?cb=1418827251" alt="CodeReviewMeeting"></p><ul><li>时间不要太长，否则造成疲惫，评审质量下降。</li><li>气氛轻松，吃货就带点零食或者以下午茶的形式来搞。</li><li>重大争论点先放一下，线下再详细考量。</li></ul><h3 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h3><p><img src="http://mindbowser.com/wp-content/uploads/2016/07/Code-Review-2.jpg" alt="TheFearInCodeReview"></p><blockquote><p>无论是代码作者，还是评审者，都需要一种积极向上的正面的态度，作者需要能够虚心接受别人的建议，因为别人的建议是为了让你做得更好；评审者也需要以一种积极的正面的态度向作者提意见，因为那是和你在一个战壕里的战友。记住，你不是一段代码，你是一个人！</p></blockquote><ul><li>被review的人有一种被虐的感觉，需要放开胸怀接受建议，从错误和失败中学习。</li><li>能有人在Code Review和你争论，是一件挺不错的事情。</li></ul><h3 id="文化"><a href="#文化" class="headerlink" title="文化"></a>文化</h3><ul><li>让code review成为一种习惯，一种文化。</li><li>code review中总结到的best practices，可以归档到设计概要上做指导。</li></ul><h3 id="从Code-Review中学习"><a href="#从Code-Review中学习" class="headerlink" title="从Code Review中学习"></a>从Code Review中学习</h3><ul><li>代码评审本身就是一个很好的knowledge sharing的过程，让团队中其他成员了解设计思路，实现方式。</li><li>相互学习，多思考如何使得设计与实现通用，优雅。修炼自己编码的能力，提升代码质量。</li></ul><h1 id="Code-Review-工具"><a href="#Code-Review-工具" class="headerlink" title="Code Review 工具"></a>Code Review 工具</h1><ul><li>工具对于代码评审来说不是重点，但能提升效率与问题的跟踪。</li><li>对于git来说，github的pull request是一种比较好的pre-commit代码评审方式，但比较依赖reviewer，需要一套比较完善的reviewer的机制，否则有阻碍项目的风险。</li><li>对应git做VCS来说，有以下这些合适的工具：<ul><li><a href="https://www.reviewboard.org/" target="_blank" rel="noopener">Review Board</a> - 免费，可以自己搭建。IDEA intellij和Eclipse都有集成插件。</li><li><a href="https://www.gerritcodereview.com/" target="_blank" rel="noopener">gerrit</a> - 跟concluence等系统有机集成。</li><li><a href="https://www.atlassian.com/software/crucible" target="_blank" rel="noopener">crucible</a> - one time payment.</li></ul></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://github.com/joho/awesome-code-review">awesome code review</a></li><li><a href="http://mindbowser.com/code-review/" target="_blank" rel="noopener">Code Review - An effective process to develop quality softwares</a></li><li><a href="https://smartbear.com/learn/code-review/what-is-code-review/" target="_blank" rel="noopener">What is Code Review</a></li><li><a href="https://hackernoon.com/code-reviews-in-an-agile-fast-paced-environment-464d5e6ec860" target="_blank" rel="noopener">Code Reviews in an Agile, Fast-Paced Environment</a></li><li><a href="http://www.flickering.cn/uncategorized/2014/08/%E8%AE%A9-code-review%E6%88%90%E4%B8%BA%E4%B8%80%E7%A7%8D%E4%B9%A0%E6%83%AF/" target="_blank" rel="noopener">让 Code Review成为一种习惯真的那么重要吗？</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Code Review </tag>
            
            <tag> Code Inspection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix jmx</title>
      <link href="/2018/01/18/2018-01-18-zabbix-jmx/"/>
      <url>/2018/01/18/2018-01-18-zabbix-jmx/</url>
      
        <content type="html"><![CDATA[<h1 id="Zabbix-JMX"><a href="#Zabbix-JMX" class="headerlink" title="Zabbix JMX"></a>Zabbix JMX</h1><ul><li>官方文档： <a href="https://www.zabbix.com/documentation/3.4/manual/config/items/itemtypes/jmx_monitoring" target="_blank" rel="noopener">https://www.zabbix.com/documentation/3.4/manual/config/items/itemtypes/jmx_monitoring</a></li><li>注意点<ul><li>对于JMX, Zabbix server需要向<a href="https://www.zabbix.com/documentation/3.4/manual/concepts/java" target="_blank" rel="noopener">Zabbix Java Gateway</a>查询，而不是Zabbix Agent。</li><li>Java gateway 跟被监控应用的JMX management api的调用应该是畅通无阻的，网络上不应该被防火墙阻塞。如果JMX需要认证的话，是要能通过的。如果只是用在非生产环境，也可以取消认证。</li></ul></li></ul><pre><code class="java">java \  -Dcom.sun.management.jmxremote \  -Dcom.sun.management.jmxremote.port=12345 \  -Dcom.sun.management.jmxremote.authenticate=false \  -Dcom.sun.management.jmxremote.ssl=false \  -jar application.jar</code></pre><h1 id="Zabbix-Java-Gateway-Installation"><a href="#Zabbix-Java-Gateway-Installation" class="headerlink" title="Zabbix Java Gateway Installation"></a>Zabbix Java Gateway Installation</h1><ul><li>download rpm<ul><li>zabbix-java-gateway-3.0.11-1.el7.x86_64.rpm from <a href="https://repo.zabbix.com/zabbix/" target="_blank" rel="noopener">Zabbix Official Repository</a></li><li>java-1.8.0-openjdk-headless.x86_64 from os yum repo</li></ul></li><li>Install<ul><li>Java gateway可以在zabbix server上安装，也可以在被监控节点上安装。不同的安装需要在zabbix server的配置上修改，见本文<code>Configuration</code> section。</li></ul></li></ul><pre><code class="shell">yum -y install java-1.8.0-openjdk-headless.x86_64rpm -ivh zabbix-java-gateway-3.0.11-1.el7.x86_64.rpm</code></pre><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><ul><li>Java gateway 配置<ul><li>一般按照如下默认配置， /etc/zabbix/zabbix_java_gateway.conf</li></ul></li></ul><pre><code class="shell">LISTEN_IP=&quot;0.0.0.0&quot;LISTEN_PORT=10052PID_FILE=&quot;/var/run/zabbix/zabbix_java.pid&quot;START_POLLERS=5TIMEOUT=3```~* Zabbix Server 配置 config /etc/zabbix/zabbix_server.conf  - 如果java gateway安装在zabbix server上的话，默认配置就ok了  - 如果java gateway安装在被监控节点上的话，JavaGateway的IP改成被监控机的外网IP```shellJavaGateway=127.0.0.1JavaGatewayPort=10052 # java gateway listen portStartJavaPollers=5    # java gateway threads, if value=0, means disable monitor java info)</code></pre><ul><li><p>配置完后重启一下服务</p></li><li><p>jmx interface</p><ul><li>在zabbix的管理页面上添加上被监控节点的jmx interface，比如下图添加cassandra的jmx接口</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/KasperDeng/kasperdeng.github.io/master/images/zabbix/zabbix-cassandra-jmx-interface.png" alt="zabbix-passive-active"></p><ul><li><p>Template</p><ul><li>导入监控JMX的模板或自己创建，attach到被监控节点。一般模板对JMX的认证的用户名，密码是做成模板的环境变量，根据情况配置。</li></ul></li><li><p>监控 Cassandra</p><ul><li>Cassandra 默认打开的是本地的JMX，而<code>zabbix java gateway</code>如果远程访问，需要修改cassandra-env.sh文件，打开remote jmx.</li></ul></li></ul><pre><code class="diff">- # JVM_OPTS=&quot;$JVM_OPTS -Djava.rmi.server.hostname=&lt;public name&gt;&quot;+ JVM_OPTS=&quot;$JVM_OPTS -Djava.rmi.server.hostname=&lt;replace this with your hostname&gt;&quot;- if [ &quot;x$LOCAL_JMX&quot; = &quot;x&quot; ]; then      LOCAL_JMX=yes  fi+ if [ &quot;x$LOCAL_JMX&quot; = &quot;x&quot; ]; then      LOCAL_JMX=no  fi- JVM_OPTS=&quot;$JVM_OPTS -Dcom.sun.management.jmxremote.authenticate=true&quot;+ JVM_OPTS=&quot;$JVM_OPTS -Dcom.sun.management.jmxremote.authenticate=false&quot;- JVM_OPTS=&quot;$JVM_OPTS -Dcom.sun.management.jmxremote.password.file=/etc/cassandra/jmxremote.password&quot;+ # JVM_OPTS=&quot;$JVM_OPTS -Dcom.sun.management.jmxremote.password.file=/etc/cassandra/jmxremote.password&quot;</code></pre><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://raw.githubusercontent.com/KasperDeng/kasperdeng.github.io/master/images/zabbix/cassandra_dashboard.png" alt="cassandra_dashboard"></p><h2 id="福利"><a href="#福利" class="headerlink" title="福利"></a>福利</h2><ul><li>安利一个zabbix模板的搜索<ul><li><a href="https://monitoringartist.github.io/zabbix-searcher/" target="_blank" rel="noopener">https://monitoringartist.github.io/zabbix-searcher/</a></li><li>github: <a href="https://github.com/monitoringartist/zabbix-community-repos">https://github.com/monitoringartist/zabbix-community-repos</a></li></ul></li><li>这里找到一个比较新的cassandra监控模板 <a href="https://github.com/m0t0k1ch1/zabbix-cassandra-template">Template-Database-Cassandra-(m0t0k1ch1)</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《go语言圣经》读书笔记</title>
      <link href="/2018/01/06/2018-01-06-Golang-Notes/"/>
      <url>/2018/01/06/2018-01-06-Golang-Notes/</url>
      
        <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>终于有点时间重新回到正常的学习节奏。心里念念不忘GO语言，于是重温一下GO语言的语法，顺便记录下笔记。希望成为一个能实战的GO程序员。</p><h1 id="哲学，思想"><a href="#哲学，思想" class="headerlink" title="哲学，思想"></a>哲学，思想</h1><ul><li>“21世纪的C语言”</li><li>简洁编程哲学的宣言，从长远来看，简洁依然是好软件的关键因素。</li><li>Go从C语言继承了相似的表达式语法、控制流结构、基础数据类型、调用参数传值、指针等很多思想。</li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul><li>定义<ul><li>采用了关键字<code>var</code>定义(Javascript类似)，编译器支持类型推断。但GO语言是强类型语言，所以可显式定义类型，变量类型的声明写在变量名称之后。</li></ul></li><li>初始化<ul><li>零值初始化，在语言层面上保证值的初始化<ul><li>数值类型变量对应的零值是0</li><li>布尔类型变量对应的零值是false</li><li>字符串类型对应的零值是空字符串</li><li>接口或引用类型(包括slice、指针、map、chan和函数)变量对应的零值是nil</li></ul></li><li>初始化表达式可以是字面量或任意的表达式(e.g. new(T))<ul><li>包级变量会在main执行前完成初始化</li></ul></li><li>支持多变量初始化赋值，混合类型，平行赋值</li></ul></li></ul><pre><code class="golang">var s, n = &quot;abc&quot;, 123 // 多变量赋值，混合类型的平行赋值</code></pre><ul><li>作用域<ul><li>类型<ul><li>全局作用域</li><li>包级作用域: 包中声明的名字，d同一个包的任何源文件中访问</li><li>源文件作用域: 对于某源文件<strong>导入的包</strong>，对同一包中的其他源文件不可见</li><li>局部作用域: 例如函数内部</li></ul></li><li>变量的词法作用域(lexical scope)与一般编程语言一样，就近原则(Principle of Proximity)。<ul><li>NOTE: 在”Go语言圣经” 2.7 “作用域” 一节中，着重强调了作用域与生命周期的概念<ul><li>声明语句的作用域对应的是一个源代码的文本区域；是一个编译时的属性。</li><li>生命周期是指程序运行时变量存在的有效时间段，在此时间区域内它可以被程序的其他部分引用；是一个运行时的概念。</li></ul></li></ul></li><li>定义在函数体内，局部变量。生命周期随着引用不可达而被GC回收而终结。<ul><li>因为Go语言的指针和闭包，局部变量的生命周期与JS类似，并不一定随着函数运行结束而消亡。</li><li>同时闭包也影响变量是在堆还是在栈上分配内存空间。</li></ul></li><li>定义在函数体外，包级变量。生命周期和整个程序的运行周期是一致的。</li><li>声明方式的不同<ul><li>函数体内: 可用简短变量声明<code>:=</code>(声明并赋初值)，省略<code>var</code>，并由编译器自行类型推断</li><li>函数体外：必须以<code>var</code>开头</li></ul></li></ul></li></ul><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><ul><li>关键字<code>const</code>定义常量，支持编译器类型推断。</li><li>itoa: 定义常量组中从 0 开始按行计数的自自增枚举值。</li><li>常量值可以是len、cap、unsafe.Sizeof等编译期可确定结果的函数返回值[4]。</li></ul><pre><code>const (a = &quot;abc&quot;b = len(a)c = unsafe.Sizeof(b))</code></pre><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><h2 id="Go是强类型语言"><a href="#Go是强类型语言" class="headerlink" title="Go是强类型语言"></a>Go是强类型语言</h2><ul><li>类型转换需要<strong>显式</strong>转换: T(v)将值v转换为类型T (Java程序员对于Go的强制类型转换表达方式要适应一下了…)</li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><table><thead><tr><th style="text-align:center">type</th><th style="text-align:center">length</th><th style="text-align:center">default</th><th style="text-align:center">note</th></tr></thead><tbody><tr><td style="text-align:center">bool</td><td style="text-align:center">1</td><td style="text-align:center">false</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">byte</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">uint8的别名</td></tr><tr><td style="text-align:center">rune</td><td style="text-align:center">4</td><td style="text-align:center">0</td><td style="text-align:center">unicode码, uint32的别名</td></tr><tr><td style="text-align:center">int, uint</td><td style="text-align:center">4 or 8</td><td style="text-align:center">0</td><td style="text-align:center">32/64bit，依赖平台编译器</td></tr><tr><td style="text-align:center">int8, uint8</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">-128 ~ 127, 0 ~ 255</td></tr><tr><td style="text-align:center">int16, uint16</td><td style="text-align:center">2</td><td style="text-align:center">0</td><td style="text-align:center">-32768 ~ 32767, 0 ~ 65535</td></tr><tr><td style="text-align:center">int32, uint32</td><td style="text-align:center">4</td><td style="text-align:center">0</td><td style="text-align:center">-21亿 ~ 21亿, 0 ~ 42亿</td></tr><tr><td style="text-align:center">int64, uint64</td><td style="text-align:center">8</td><td style="text-align:center">0</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">float32</td><td style="text-align:center">4</td><td style="text-align:center">0.0</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">float64</td><td style="text-align:center">8</td><td style="text-align:center">0.0</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">complex64</td><td style="text-align:center">8</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">complex128</td><td style="text-align:center">16</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">uintptr</td><td style="text-align:center">4 or 8</td><td style="text-align:center"></td><td style="text-align:center">可存储指针的uint32/uint64</td></tr><tr><td style="text-align:center">array</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">值类型</td></tr><tr><td style="text-align:center">struct</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">值类型</td></tr><tr><td style="text-align:center">string</td><td style="text-align:center"></td><td style="text-align:center">“”</td><td style="text-align:center">UTF-8 字符串</td></tr><tr><td style="text-align:center">slice</td><td style="text-align:center"></td><td style="text-align:center">nil</td><td style="text-align:center">引用类型</td></tr><tr><td style="text-align:center">map</td><td style="text-align:center"></td><td style="text-align:center">nil</td><td style="text-align:center">引用类型</td></tr><tr><td style="text-align:center">channel</td><td style="text-align:center"></td><td style="text-align:center">nil</td><td style="text-align:center">引用类型</td></tr><tr><td style="text-align:center">interface</td><td style="text-align:center"></td><td style="text-align:center">nil</td><td style="text-align:center">接口</td></tr><tr><td style="text-align:center">function</td><td style="text-align:center"></td><td style="text-align:center">nil</td><td style="text-align:center">函数</td></tr></tbody></table><ul><li>其他变量不能强制当作布尔类型使用</li><li>GO把复数作为基本类型，对于高级数学运算，深度学习有帮助。GONU M或许将会成为numpy的强大对手。</li></ul><h2 id="复合数据类型"><a href="#复合数据类型" class="headerlink" title="复合数据类型"></a>复合数据类型</h2><ul><li>数组的长度必须是常量表达式，因为数组的长度需要在编译阶段确定</li><li>数组依然很少用作函数参数；相反，我们一般使用slice来替代数组</li><li>数组和结构体是有固定内存大小的数据结构</li><li>slice和map是变长的序列，动态的数据结构</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li>由同构的元素组成</li></ul><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><ul><li>由异构的元素组成</li><li>一个命名为S的结构体类型将不能再包含S类型的成员：因为一个聚合的值不能包含它自身。</li><li>一个命名为S类型的结构体可以包含<code>*S</code>指针类型的成员，以创建递归的数据结构。</li><li>匿名成员<ul><li>匿名成员特性只是对访问嵌套成员的点运算符提供了简短的语法糖。</li><li>结构体字面值并不能用匿名成员的语法糖的简短表示法来赋值，会导致编译错误。</li><li>匿名成员在结构体的可见性由匿名成员类型的可导出性控制。</li></ul></li></ul><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><ul><li>slice底层引用一个匿名的数组对象。</li><li>slice是轻量级的数据结构，一种高效率的(指针)、可变长的(长度)、预留扩展空间(容量)的数组。<ul><li>指针: 指向第一个slice元素对应的底层数组元素的地址，slice的第一个元素并不一定就是底层数组的第一个元素。</li><li>长度：slice中元素的数目，长度不能超过容量。len函数返回slice的长度。</li><li>容量: 从slice的开始位置到底层数据的结尾位置。cap函数返回slice的容量。</li></ul></li><li>切片操作<ul><li>s := array[i:j]</li><li>s[m:n], 0 ≤ m ≤ n ≤ cap(s)<ul><li>切片操作(m-n)超出cap(s)的上限将导致一个panic异常</li><li>超出len(s)则是意味着扩展了slice，长度变大。</li></ul></li></ul></li><li>比较<ul><li>零值的slice等于nil。一个nil值的slice并没有底层数组。一个nil值的slice的长度和容量都是0</li><li>非nil值的slice的长度和容量也是0的</li></ul></li><li>构建</li></ul><pre><code class="golang">make([]T, len) // len == capmake([]T, len, cap) // same as make([]T, cap)[:len]</code></pre><p><img src="https://books.studygolang.com/gopl-zh/images/ch4-01.png" alt="slice"></p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><ul><li><p>Go语言没有<code>Set</code>数据类型，采用节省内存(value是bool或者空结构体)的map当作set: map[string]struct{}</p></li><li><p>值类型 vs. 指针类型</p><ul><li>结构体可以作为函数的参数和返回值</li><li>效率：较大的结构体通常会用指针的方式传入和返回</li><li>函数内部修改结构体成员的话，必须用指针传入；在Go语言中，所有的函数参数都是值拷贝传入的。</li></ul></li></ul><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><ul><li><code>&amp;</code>是取变量地址符(<code>p</code>指向变量<code>i</code>的内存地址)，<code>*p</code>透过指针访问目标对象，支持指针类型<code>*T</code>，支持指针的指针<code>**T</code> (和C++一样)</li></ul><pre><code class="golang">i := 1p := &amp;i // p的类型是*int(指针类型*T)*p = 2  // 对应指针p指向的变量的值</code></pre><ul><li>不支持指针运算，比如p++。不支持 “-&gt;” 运算符 (和C++不一样)</li><li>空指针值:nil，非C++的NULL，非java的null。</li><li>指针类型装换：可以通过unsafe.Pointer和任意类型指针间进行转换。</li><li>可以通过将unsafe.Pointer转换成uintptr，配合unsafe.Offsetof变相进行指针运算[4]。</li><li>返回局部变量指针是安全的,编译器会根据需要将其分配在GC Heap上。</li></ul><h4 id="变量内存-4"><a href="#变量内存-4" class="headerlink" title="变量内存[4]"></a>变量内存[4]</h4><ul><li>new<ul><li>new计算类型大小,为其分配零值内存,返回指针。</li></ul></li><li>make<ul><li>make只支持引用类型的map, slice, chan。</li><li>make会被编译器翻译成具体的创建/构造函数,由其分配内存和初始化成员结构,返回对象而非指针。</li></ul></li></ul><h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><ul><li>“++”、”–” 是语句而非表达式</li></ul><pre><code class="golang">b := n++ // syntax errorif n++ == 1 {} // syntax error++n // syntax error</code></pre><ul><li>不支持三元操作符 <code>a &gt; b ? a : b</code></li><li>range<ul><li>range 会复制对象</li><li>range 忽略第2个返回值，支持 string/array/slice/map</li></ul></li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><blockquote><p>函数是一等公民(javascript名言)</p></blockquote><h2 id="函数类型-函数标识符"><a href="#函数类型-函数标识符" class="headerlink" title="函数类型(函数标识符)"></a>函数类型(函数标识符)</h2><ul><li>相同的函数类型和函数标识符：两个函数形式参数列表和返回值列表中的变量类型一一对应。</li><li>形参和返回值的变量名不影响函数标识符。</li></ul><h2 id="形参"><a href="#形参" class="headerlink" title="形参"></a>形参</h2><ul><li>形参名：该形参在函数体中没被引用时，形参名可省略。</li><li>形参类型：具有相同类型的形参，不必为每个形参都写出参数类型，可以用省略参数类型的形式声明。</li><li>没有默认参数值(python有默认参数值的特性)。</li><li>形参是实参的拷贝，实参通过值传递方式赋值。</li><li>实参如果是引用类型(slice, map, pointer, channel, function)，可致函数间接修改实参。</li><li>可变参数<ul><li>参数列表的<strong>最后</strong>一个参数类型之前加上省略符号”…”</li><li>可变参数在函数体中看作为切片</li><li>可以直接将切片作为实参传递给可变参数函数，但需要在实参后加上省略号”…”</li></ul></li></ul><pre><code class="golang">func sum(vals...int) int {   // ...}values := []int{1, 2, 3, 4}fmt.Println(sum(values...)) // slice as real argument for Variadic Functions </code></pre><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><ul><li>若返回值有显式的变量名，函数的return语句可以省略操作数(bare return)。bare return可以减少代码的重复，但是某些场景使得代码难以被理解，不宜过度使用。</li><li>支持多返回值(类似python的多返回值特性)<ul><li>多返回值的设计，使得可预料、可控制的错误得到良好的处理，而不用像那些将错误看作是异常的语言那样子通过抛/捕异常的方式来处理。</li></ul></li><li>调用者可以通过<code>_</code>(空标识符，blank identifier)忽略没用的返回值。</li></ul><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ul><li>函数的形参和有名返回值作为函数最外层的局部变量，被存储在相同的词法块中。</li></ul><h2 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h2><ul><li>标准库中没有函数体的函数声明，该函数可能是native方法，不是以Go实现的。</li><li>Go中大部分函数的代码结构几乎相同<ul><li>首先是一系列的初始检查，防止错误发生，之后是函数的实际逻辑。</li></ul></li></ul><h2 id="函数值-Function-Value-Closures-闭包"><a href="#函数值-Function-Value-Closures-闭包" class="headerlink" title="函数值(Function Value, Closures(闭包))"></a>函数值(Function Value, Closures(闭包))</h2><ul><li>函数拥有类型，可以被赋值给其他变量，传递给函数，从函数返回。对函数值的调用类似函数调用。</li><li>函数值不可比较，因为函数值除了引用了代码，还记录了状态(闭包)。它只能跟其零值(nil)比，用于作初始值检查。</li></ul><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ul><li>闭包：词法闭包(Lexical Closure)的简称，是指引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。当函数离开创建环境后，依然持有其上下状态。</li><li>闭包中引用的是自由变量的内存地址，而不是某一刻的值，这些自由变量以及其引用的对象并没有被释放。</li><li>更多闭包与作用域的知识，可参考javascipt的书<a href="https://github.com/getify/You-Dont-Know-JS">You-Dont-Know-JS</a>或其<a href="https://maximdenisov.gitbooks.io/you-don-t-know-js/content/" target="_blank" rel="noopener">gitbook</a>，概念相通。</li></ul><h2 id="匿名函数-Anonymous-Function"><a href="#匿名函数-Anonymous-Function" class="headerlink" title="匿名函数(Anonymous Function)"></a>匿名函数(Anonymous Function)</h2><ul><li>通过函数字面量(function literal)定义</li><li>匿名函数可以访问完整的词法作用域。</li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li>Deferred Function<ul><li>包含该defer语句的函数执行完毕时，defer后的函数会在在释放堆栈信息之前被执行。</li><li>defer语句采用压栈方式，执行顺序与声明顺序相反。</li></ul></li><li>panic(err)<ul><li>panic函数接受任何值做输入参数，作为某种错误信息，以panic value的形式输出到日志。</li><li>panic会引起程序的崩溃，一般用于严重错误。</li></ul></li><li>recover()<ul><li>recover会使程序从panic中恢复，并返回panic value。</li></ul></li></ul><h1 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h1><ul><li>for<ul><li>Go语言只有关键字<code>for</code>用于循环</li></ul></li></ul><pre><code class="golang">for i:=1; i &lt; 10; i++ {   //doSomething()}// whilefor i &lt; 10 {   //doSomething()   i += 1}// death-loopfor {}</code></pre><ul><li>if<ul><li>if 可以在条件之前执行一个简单的语句</li></ul></li></ul><pre><code class="golang">if err := WaitForServer(url); err != nil {    log.Fatalf(&quot;Site is down: %v\n&quot;, err)}</code></pre><ul><li>switch<ul><li>与C，Java不同，默认匹配的分支会自动终止，无须<code>break</code>，想贯穿的话，显式地在分支加fallthrough语句</li></ul></li></ul><h1 id="调试相关"><a href="#调试相关" class="headerlink" title="调试相关"></a>调试相关</h1><ul><li>fmt.Printf</li></ul><table><thead><tr><th style="text-align:center">format</th><th style="text-align:center">example</th><th style="text-align:center">output</th><th style="text-align:center">note</th></tr></thead><tbody><tr><td style="text-align:center">%T</td><td style="text-align:center">fmt.Printf(“i is of type %T\n”, i)</td><td style="text-align:center"></td><td style="text-align:center">print type of variable/function</td></tr><tr><td style="text-align:center">%#v</td><td style="text-align:center">fmt.Printf(“%#v\n”, w)</td><td style="text-align:center">Wheel{Circle:Circle{Point:Point{X:42, Y:8}, Radius:5}, Spokes:20}</td><td style="text-align:center"># - print every member with name in struct</td></tr><tr><td style="text-align:center">%p</td><td style="text-align:center">fmt.Printf(“%p\n”, p)</td><td style="text-align:center">0x2101ef018</td><td style="text-align:center">print pointer address</td></tr></tbody></table><ul><li>Deferred Function<ul><li>调试复杂程序时，defer机制可用于记录何时进入和退出函数，以及记录输入参数以及返回值。</li></ul></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://books.studygolang.com/gopl-zh/" target="_blank" rel="noopener">Go语言圣经(中文版)</a><ul><li><a href="https://docs.hacknode.org/gopl-zh/" target="_blank" rel="noopener">https://docs.hacknode.org/gopl-zh/</a></li></ul></li><li><a href="http://gopl.io" target="_blank" rel="noopener">Go语言圣经英文版-gopl</a><ul><li><a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/" target="_blank" rel="noopener">英文版在线</a></li></ul></li><li>Go语言圣经中文版-github<ul><li><a href="https://github.com/golang-china/gopl-zh">https://github.com/golang-china/gopl-zh</a></li><li><a href="https://github.com/gopl-zh/gopl-zh.github.com">源文件构建离线版本</a></li></ul></li><li><a href="https://github.com/qyuhen/book">雨痕-Go学习笔记第四版</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix HA on AWS</title>
      <link href="/2017/03/16/2017-03-16-zabbix-ha-on-aws/"/>
      <url>/2017/03/16/2017-03-16-zabbix-ha-on-aws/</url>
      
        <content type="html"><![CDATA[<h1 id="Zabbix-HA-Requirment"><a href="#Zabbix-HA-Requirment" class="headerlink" title="Zabbix HA Requirment"></a>Zabbix HA Requirment</h1><ul><li>On AWS</li><li>两台Zabbix Server, 在AWS上，处于一个VPC，但分别处在两个不同的AZ。</li><li>Active-Passive mode. 原因：zabbix server 自身有一套external scrips 去AWS cloudwatch 获取AWS service metrics。<br>如果是采用Active-Active的方式的，两台Active Zabbix server会造成数据冗余或冲突。</li></ul><h1 id="HA-Implementation"><a href="#HA-Implementation" class="headerlink" title="HA Implementation"></a>HA Implementation</h1><h2 id="Decouple-Zabbix-Database"><a href="#Decouple-Zabbix-Database" class="headerlink" title="Decouple Zabbix Database"></a>Decouple Zabbix Database</h2><ul><li>Zabbix存储的数据库需要解耦出来，方便Zabbix Server主从切换，保持数据存储的唯一性。</li><li>对于Zabbix server来说，最重要的就是监控的数据。在AWS上，最方便的方式就是采用AWS的RDS作为Zabbix的后端数据库，利用AWS的服务。</li><li>AWS上RDS比较强大，有MySQL, MariaDB和Postgresql可供选择。为了HA方案在别的云平台上的可重用性，选择Postgresql最为后端数据库。</li></ul><h3 id="RDS-Setup"><a href="#RDS-Setup" class="headerlink" title="RDS Setup"></a>RDS Setup</h3><ul><li>启用RDS前，设置好master-user-name和master-user-password</li><li>选择RDS的Multi-AZ功能。备份，维护按需设置。</li><li>估算好检测数据所需的数据库容量大小，选择对应的DB实例类型 (e.g. db.m4.large)</li><li>更新RDS的security group的设置，保证与zabbix的连通性。</li></ul><h3 id="MariaDB"><a href="#MariaDB" class="headerlink" title="MariaDB"></a>MariaDB</h3><ul><li>Verify connection</li></ul><pre><code class="shell">mysql -h &lt;RDS-DNS&gt; -P 3306 -u &lt;RDS-master-user-name&gt; -p</code></pre><ul><li><code>yum install -y mariadb</code> which use its client to connect RDS</li><li><code>setsebool -P httpd_can_network_connect_db=1</code> and <code>setsebool -P zabbix_can_network=1</code></li></ul><h3 id="Postgres"><a href="#Postgres" class="headerlink" title="Postgres"></a>Postgres</h3><ul><li>Verify connection</li></ul><pre><code class="shell">psql \   --host=occ-&lt;rds instance DNS name&gt; \   --port=5432 \   --username &lt;username&gt; \   --password</code></pre><ul><li><code>yum install -y postgresql</code></li></ul><ul><li><code>setsebool -P httpd_can_network_connect_db=1</code> and <code>setsebool -P zabbix_can_network=1</code></li></ul><h2 id="AWS-ELB"><a href="#AWS-ELB" class="headerlink" title="AWS ELB"></a>AWS ELB</h2><p>在AWS上，zabbix service是通过AWS ELB来发现后端哪个Zone上的Zabbix server处于服务状态。</p><ul><li><p>端口Health-Check：</p><ul><li>external ELB:<ul><li>80 (apache)</li><li>3000 (grafana)</li></ul></li><li>internal ELB: 10051 (用于zabbix-agent上报指标)</li></ul></li><li><p><strong>NOTE</strong>: 在AWS上不能通过VIP来做，因为AWS上不支持传播<code>多播包 multicast packet</code></p></li></ul><h2 id="Pacemaker"><a href="#Pacemaker" class="headerlink" title="Pacemaker"></a>Pacemaker</h2><p>通过pacemaker（foss, scalable HA cluster resource manager）来提供HA的功能。</p><ul><li><p>具体安装，大体配置步骤，请参考 <a href="https://ericsysmin.com/2016/02/18/configuring-high-availability-ha-zabbix-server-on-centos-7/" target="_blank" rel="noopener">Configuring High Availability (HA) Zabbix Server on CentOS 7</a>， 本文不累赘，但注意以下几点：</p></li><li><p>对apache的状态检查，可以通过启用自带的状态模块（built-in module在<code>/usr/lib64/httpd/modules/</code>），配置如下：</p><ul><li>apache httpd status configuration<ul><li>Add <code>LoadModule status_module modules/mod_status.so</code> to <code>/etc/httpd/conf/httpd.conf</code></li><li>Add url handling as below</li></ul></li></ul></li></ul><pre><code class="xml"># Allow server status reports generated by mod_status,# with the URL of http://servername/server-status# Change the &quot;.example.com&quot; to match your domain to enable.#&lt;Location /server-status&gt;    SetHandler server-status    Order deny,allow    Deny from all    Allow from all&lt;/Location&gt;</code></pre><ul><li>在pacemaker里面创建资源</li></ul><pre><code class="shell">pcs resource create zabbix_server systemd:zabbix-server op monitor interval=10spcs resource create zabbix_httpd systemd:httpd configfile=/etc/httpd/conf/httpd.conf statusurl=&quot;http://127.0.0.1/server-status&quot; op monitor interval=20spcs resource create grafana_server systemd:grafana-server op monitor interval=10s</code></pre><ul><li>在pacemaker里面把3个resources(zabbix, apache, grafana)组成创建资源组</li></ul><pre><code class="shell">pcs resource group add zabbixcluster zabbix_server zabbix_httpd</code></pre><ul><li>在AWS上注意网络连通性问题，尤其当用<code>pcs status</code>看到集群状态不对的时候。检查下<code>security group</code>里面以下端口是否开放了。<ul><li>UDP 5405: corosync 用于集群状态检查</li></ul></li></ul><p><img src="http://www.plantuml.com/plantuml/png/XP7BReCm44Nt_eeHsQGB8hKV40cQgfj4GicgYLWCC11KQaUs6_fG_hq6Ex6LjEe25lVSWMCF5nL1zBHCesy6q79DiiQIOA_rWPqOarHgv4rdIfd9L_XA4XxNgmY6FX-djrWKxKSAWaEoZLEOPgXKUwGxMmAe9RwPtjVOYylkNPdVF4GmUPRqwJe0EyUB762oQRiZoJF10vPx-eqq4claEA2Gd9XzGi742IOmJKhzhz-zyLjYpuqZyHj975H6z49T9_ehqx_mMTVm6soTpPrNgB50POpMYurpT8gPKBgHf28lP0-tI7C6RfvT91lYEeSudjjzxWefUaKoY8ONn9NekKdyuQvohst1R3OFrXLaVXqikAdX4rupsFCuSo4_" alt="zabbix-ha-on-aws"></p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><ul><li>config files:<ul><li><code>/etc/corosync/corosync.conf</code></li><li><code>/var/lib/pcsd/pcs_settings.conf</code></li></ul></li><li>logs<ul><li><code>/var/log/pacemaker.log</code></li><li><code>/var/log/cluster/corosync.log</code></li><li><code>/var/log/pcsd/pcsd.log</code></li></ul></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="http://clusterlabs.org/" target="_blank" rel="noopener">PaceMaker</a></li><li><a href="https://ericsysmin.com/2016/02/18/configuring-high-availability-ha-zabbix-server-on-centos-7/" target="_blank" rel="noopener">Configuring High Availability (HA) Zabbix Server on CentOS 7</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps on Production</title>
      <link href="/2017/03/06/2017-03-06-Production-DevOps/"/>
      <url>/2017/03/06/2017-03-06-Production-DevOps/</url>
      
        <content type="html"><![CDATA[<h1 id="生产环境之运维"><a href="#生产环境之运维" class="headerlink" title="生产环境之运维"></a>生产环境之运维</h1><p>最近在生产环境上游历了一番，大版本升级，流量控制，问题的追根索源，甚是各种艰辛。</p><h1 id="线上资源配置问题"><a href="#线上资源配置问题" class="headerlink" title="线上资源配置问题"></a>线上资源配置问题</h1><ul><li>池化连接<ul><li>必须清楚了解业务进行设置<ul><li>主要是连接数个数与闲置回收的时间: 防止连接数瓶颈。</li><li>超时设置：防止在网络抖动或者数据库不可用的状况下，业务核心线程被阻塞，连接池爆浆。</li></ul></li><li>e.g. 数据库连接池<ul><li>池的最小最大值（不同数据库需）</li><li>从DPCP获取连接超时</li><li>连接超时</li><li>读超时</li><li>socket超时</li><li>重试次数与每次重试相隔时间</li></ul></li></ul></li><li>NoSQL<ul><li>容量 （dimension）</li><li>TTL</li><li>连接管理</li></ul></li><li>Dev提供友好的配置指引，工程公式及原理，让Ops了解当前系统在不同的部署环境下如何合理配置系统资源。<ul><li>系统连接数及计算公式</li><li>客户端（e.g. http client）的超时设置</li><li>事务的超时设置</li></ul></li><li>核心业务调用非核心业务的超时<ul><li>为免非核心业务出现问题时导致主业务线程阻塞，需配备超时设置</li></ul></li></ul><h1 id="系统高并发保护"><a href="#系统高并发保护" class="headerlink" title="系统高并发保护"></a>系统高并发保护</h1><p>系统高并发流量保护是十分重要的。<br>高并发流量有分正常的业务量与非正常的业务量。非正常的业务量有可能是客户端/服务商的异常行为导致，也有可能是系统被洪水攻击。<br>当非正常业务流量进入系统的时候，系统保护尤为关键的。</p><ul><li>系统保护设计相关注意事项<ul><li>限流 （最常用的系统保护策略之一）<ul><li>要在业务入口限流。而不是让流量进入到系统内部，消耗各个内部部件（如负载均衡器等）才由核心业务层按照业务的SLA指标限流。<br>否则，会导致以下问题。<ul><li>内部资源被耗尽，如内部负载均衡器资源。</li><li>流量进入系统过深，占用过多系统核心业务资源，影响系统正常业务处理能力。</li></ul></li><li>限流应该返回正确的状态码，让客户端正确知道服务器当前状态，而不是简单告知系统错误或系统不可用<ul><li>不论是http还是电信业务协议，均有限流关联的状态码，用于告知客户端需要等待一段时间再尝试请求，留给系统有一定的喘息时间。</li><li>需要在系统接口文档加以强调该返回状态码，规范客户端行为。当然这只是纯粹行为规范，毕竟很难保证客户端的正确行为。</li></ul></li><li>不论系统采取基于令牌算法还是漏桶算法的限流机制，都需要正确认识系统能支撑吞吐量的阈值，并在线下充分测试。</li><li>层级限流：在保证不超系统阀值的情况下，让流量进入，各层次逐渐收窄，尽量保证服务的可用性同时又能保护系统。比如<ul><li>接口层通过漏桶/令牌算法放进流量，业务应用层再根据不同的具体细分业务的SLA进行限流。</li></ul></li></ul></li><li>降级<ul><li>基于各种指标的自动化有损降级机制<ul><li>远程调用降级：比如核心业务远程调用非核心的三方的服务，出现超时时，基于服务性质，看能否先bypass一段时间。</li><li>基于系统关键资源，负载情况降级。</li></ul></li></ul></li><li>缓冲<ul><li>系统有预留的缓冲队列与资源（线程池），支持系统瓶颈时切换为异步调用。</li></ul></li><li>总体来说，系统保护都需要业务提供当前指标做算法统计，才能充分自动化各种操作。不能否决人为操作，但尽量要避免。<br>设计上最好能做到对业务是无侵入的方式，避免各种耦合带来的问题。</li></ul></li></ul><h1 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h1><ul><li>切忌对当前系统的支撑能力与安全保障过份自信，防微杜渐，慎防客户端不可预测的行为与洪水攻击。<ul><li>“墨菲定理”： 如果你担心某种情况发生，那么它就更有可能发生。</li></ul></li><li>加强监控<ul><li>监控比自动化来得更重要。通过可视化的监控与趋势的预测与预警，能提高运维的能效。</li><li>完善日志的输出与收集，outage check list。<ul><li>虽然通过日志在线发现问题，定位问题，效率堪忧。但是日志能给Dev做事后分析，定位root cause。</li></ul></li></ul></li><li>Ops与Dev加强合作与演练，当线上问题出现才临时呼叫Dev team，秩序混乱，效率，沟通成本太高。<ul><li>类似Netflix的chaos monkey，随时随地模拟各种恶劣情况，扰乱生产环境（当然是模拟生产环境的staging）的演练。</li></ul></li><li>应急预案<ul><li>在多机房部署下，应当切换流量开关，尝试先让部分流量切换到其他机房处理，减轻当前机房压力以待观察能否慢慢让系统恢复，提高正常业务处理能力。否则，多机房部署成了纸上模型。</li><li>如果快速定位到是客户端问题，需要联系服务商一并修复。</li></ul></li></ul><h1 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h1><p>上面讲的都是原则性的东西，更多的是需要在设计层面，运维层面迭代运转，相互促进。因此DevOps的文化，工具，沟通都是十分的重要。<br>线下需要同时去系统的性能进行测试，评估，解决瓶颈问题，以及各种演练。系统在上线前需要充分地soak，保证系统能良好的运转与稳定性。</p><ul><li>开发团队注重运维团队对系统和线上问题的反馈，对收集的日志做及时分析与bug修复。</li><li>测试团队要保证测试点与测试用例的覆盖率，最好有持续集成测试保证功能的完备性。</li><li>运维团队需要定义好各种异常场景的模型与预案。当问题出现的时候能及时采取措施而不至于手足无措。</li><li>监控工具，自动化运维工具需要维护好一个backlog，通过不断的反馈促进工具的开发与运作。</li><li>沟通方面，需要团队之间形成相互合作的文化，在职责分明的背景下，有序，协调地开展工作，才能高效地解决各种紧急问题。<ul><li>同步团队之间的知识。</li><li>各自build up好competence。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown notebook</title>
      <link href="/2016/12/25/2016-12-25-markdown-notebook/"/>
      <url>/2016/12/25/2016-12-25-markdown-notebook/</url>
      
        <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>作为一名码农，开发，设计，测试啥的，都需要用笔记软件记录一下tips，心得，体会。在周边，会发现Evernote, 有道笔记，为知笔记基本上是最为主流的。我个人比较喜欢用为知笔记，无他，因为它支持markdown，当然有道现在也支持了。</p><p>但’岁末迎新’，为知笔记在新的一年更改收费策略，全面铺开对个人用户收费(现在不单是屙乐扣会到处开炮，连个笔记软件都想绑架了你)。好吧，作为穷码农，我只好自己折腾了，把之前的为知笔记全部export出来，准备找个类似的……</p><p>但万万没想到，还真不容易找到一个合适的……</p><h2 id="具体需求如下"><a href="#具体需求如下" class="headerlink" title="具体需求如下"></a>具体需求如下</h2><ul><li>Mandatory<ul><li>既然笔记软件，一定要集成笔记文件管理器</li><li>要有只读模式，而不是那种左右分屏的markdown编辑器</li><li>支持markdown（最好高级点，能支持LATEX公式，时序图，甘特图等）</li><li>支持VIM模式（vi狂魔）</li><li>开源（方便我自己去捣鼓，有啥不顺能自己改，而且不会被再绑架）</li><li>一定要有漂亮的样式，主题</li></ul></li><li>Optional<ul><li>能打tag</li><li>能免费同步当然最好，但容易被绑架。我打算自己手工同步</li><li>能直接分享</li><li>全平台：Windows, Linux, Mac, IOS, android…… （这个太变态了。。。）</li></ul></li></ul><p>需求挺多……， 找了半天，最大的发现就是Mac上很多这类型的笔记软件，但Windows上去很少。 Mac却有很多，尤其有像<a href="http://marboo.io/" target="_blank" rel="noopener">Marboo</a>(码薄笔记，。。。这名字)这样简洁，界面清新，功能简单够用的。但只支持Mac啊，还要付费，我等穷鬼用不起。</p><p>先不说是否要全平台的，能找到类似的有这些，如果按类型分，基本就是一下几种类型。</p><ul><li><p>JS版，基于Electron (atom shell)</p><blockquote><p>Electron的缺点就是启动慢，但启动了后也不见得慢，笔记软件，也就启动一次而已啦。但优点突出，尤其在样式渲染，所以Electron desktop app一般都是全平台的，而且贴近Mac应用的酷炫。</p></blockquote><ul><li><p><a href="https://atom.io" target="_blank" rel="noopener">atom</a></p><ul><li>程序员的编辑器，原生对markdown有很好的支持。作为markdown编辑器，还算是不错的选择。</li><li>但是<strong>缺点</strong>也是明显的<ul><li>Electron应用，启动慢</li><li>窗口切换(windows：alt + tag)后，光标也要等好几秒才能响应（感觉是个问题，其他Electron也没见这样子。作为Atom shell的鼻祖，这个是否可以改善一下。） （确认了上面的问题，是因为每次窗口切换，atom内置的git会refresh index. 问题跟踪跟workaround在<a href="https://github.com/atom/atom/issues/9544。就是在init.coffee里面加了一段禁止git">https://github.com/atom/atom/issues/9544。就是在init.coffee里面加了一段禁止git</a> refresh index，配置了手工refresh的keymap。）</li></ul></li><li>要想成为程序员的笔记本软件，只要稍微改造一下，安装以下插件。<ul><li><a href="https://github.com/shd101wyy/markdown-preview-enhanced">markdown-preview-enhanced</a>: 对markdown preview提供更加强大的功能，比如，scroll sync, TOC, MathJax/KaTex, export PDF, HTML, JPG, Flowchart/Sequence diagram 以及preview css自定义 等等</li><li><a href="https://atom.io/packages/maximize-panes" target="_blank" rel="noopener">maximize-panes</a>: 最大化preivew panel，作为笔记的阅读模式。</li><li><a href="https://atom.io/packages/vim-mode-plus" target="_blank" rel="noopener">vim-mode-plus</a></li><li><a href="https://atom.io/packages/vim-mode-plus-ex-mode" target="_blank" rel="noopener">vim-mode-plus-ex-mode</a></li></ul></li></ul></li><li><p><a href="https://github.com/leanote/leanote">leanote</a>: 中文叫<em>蚂蚁笔记</em></p><ul><li>开源，国人开发<ul><li>码注释都是中文，亲切？</li></ul></li><li>全平台，包括手机端</li></ul><ul><li><ul><li>和安卓</li></ul><ul><li>支持VIM</li></ul><ul><li>ACS模式</li></ul></li></ul><ul><li><a href="https://github.com/leanote/desktop-app">Leanote Desktop APP</a>是基于Electron开发的，开发，调试都很方便。</li></ul><ul><li><ul><li>用了NEDB做存储的，包含了title tags date categoris等meta。所以导入导出都需要做格式的转换，这些都由插件来完成。<br>– 自身带了从Evernote和Leannote导入的插件。</li></ul><ul><li>确认了上面的问题，是因为每次窗口切换，atom内置的git会refresh index. 问题跟踪跟workaround在<a href="https://github.com/atom/atom/issues/9544。就是在init.coffee里面加了一段禁止git">https://github.com/atom/atom/issues/9544。就是在init.coffee里面加了一段禁止git</a> refresh index，配置了手工refresh的keymap。</li><li><a href="https://github.com/goodbest/Leanote4MD">leanote导入导出MD工具</a>: 但只支持普通注册用户（通过请求服务端导入本地markdown文件），本地用户想通过插入NEDB的话，暂时没实现。</li></ul></li></ul><ul><li>支持本地账号。隐藏功能？从代码里面看到的，否则你必须要去官方   注-个账号。<ul><li>要用本地账号，需要创建本地用户。把login.xml的页面里面创建本地用户的<code>local-form</code>的样式和普通用户登   录框的<code>-eanote-form</code>对调一下，就能显示出创建本地用户的页面了。</li></ul></li><li>主题不算太丰富，但够用。而且主题能定制。</li><li>-果只用本地账号，可以将所有的NEDB数据库同步到网盘。下次导入覆盖就行了。当然，leanote官方也提供同步，有免费套餐和旗舰套餐，见：<a href="https://leanote.com/pricing" target="_blank" rel="noopener">https://leanote.com/pricing</a></li></ul></li><li><a href="https://github.com/rhiokim/haroopad">haroopad</a>: <a href="http://pad.haroopress.com/" target="_blank" rel="noopener">官网</a>，韩国出品。可以没集成文件管理器，而且源码两年都没更新了。release版本v0.13.1跟github的tag都对不上号了。但作为markdown编辑器不错。本文就是在haroopad上写的。有空尝试改改它，加上文件管理器。</li><li><a href="https://github.com/AnotherNote/anote">another note</a>:目前仅支持Mac，但开源，捣鼓下支持Windows不难。样式不错。</li></ul></li><li><p>Web版</p><ul><li><a href="https://github.com/benweet/stackedit">stackedit</a></li><li><a href="https://github.com/ncornette/Python-Markdown-Editor">Python-Markdown-Editor</a>: 只能算是markdown编辑器了。</li></ul></li><li><p>python版，基于PyQt.4+/5+</p><ul><li><a href="http://markeditor.com/app/markeditor" target="_blank" rel="noopener">markeditor</a>：非开源，有据说不限时间的免费试用版。偶尔提醒你购买license，而且据说用得越久，提醒越频密（这招也狠）。几乎能满足我在Windows上所有需求，但是解释markdown却个别地方有问题。。。</li><li><a href="https://www.farbox.com/service/app/desktop_editor" target="_blank" rel="noopener">FarBox</a>: 可以与Farbox同步，几乎与上面的markeditor差不多。</li><li><a href="https://github.com/ShadowKyogre/mikidown">mikidown</a></li></ul></li><li><p>C++版</p><ul><li><a href="https://github.com/zhangshine/MdCharm">MdCharm</a>: 啥都好，C++开发，启动速度也快，但样式真的不敢恭维</li><li><a href="https://github.com/pbek/QOwnNotes">QQWnNotes</a>：<a href="http://www.qownnotes.org/" target="_blank" rel="noopener">官网</a>, 基于Qt 5.3+，强大得让人害怕。。。</li></ul></li><li><p>另类</p><ul><li><a href="https://github.com/Philip-Scott/Notes-up">Notes-up</a>: 样式很符合我口味，但基于elementary OS，什么鬼……。原来<a href="https://elementary.io/zh_CN/" target="_blank" rel="noopener">elementary OS</a>是基于快速、开源的 Windows / macOS 替代方案。</li></ul></li><li><p>纯粹的markdown编辑器</p><ul><li><a href="http://www.markdownpad.com/" target="_blank" rel="noopener">markdownpad</a></li><li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">作业部落-CmdMarkdown</a></li><li><a href="http://www.jianshu.com/" target="_blank" rel="noopener">简书</a></li><li><a href="http://markdown.xiaoshujiang.com/" target="_blank" rel="noopener">小书匠</a>: 功能强大，主题丰富，还能支持<em>竖排写作</em>，有Web版和离线版。赞一下。</li><li><a href="http://www.typora.io/" target="_blank" rel="noopener">Typora</a>:很特别的markdown编辑器， 没有左右分栏的preview. WYSIWYG - What You See Is What You Get</li><li><a href="https://github.com/Moeditor/Moeditor">moeditor</a>:<a href="https://moeditor.org/" target="_blank" rel="noopener">官网</a>，开源，基于Electron。</li><li><a href="https://github.com/tylingsoft/markdown-plus">markdown-plus</a>: <a href="http://tylingsoft.com/markdown-plus/" target="_blank" rel="noopener">官网</a></li></ul><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>个人认为atom跟leanote是比较适合做markdown笔记软件的。满足不了的需求需要自己折腾。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> SDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix snmp trap trigger</title>
      <link href="/2016/12/24/2016-12-24-zabbix-snmp-trap-trigger/"/>
      <url>/2016/12/24/2016-12-24-zabbix-snmp-trap-trigger/</url>
      
        <content type="html"><![CDATA[<h1 id="Zabbix-Trigger"><a href="#Zabbix-Trigger" class="headerlink" title="Zabbix Trigger"></a>Zabbix Trigger</h1><ul><li>Zabbix 提供了trigger（触发器）的功能，用于检测某些事件的发生，从而触发用户通知。</li><li>对于SNMP Trap，可以充分利用trigger的触发机制，定制需要的用户警告与通知。</li></ul><h1 id="Zabbix-SNMP-Trigger-Event"><a href="#Zabbix-SNMP-Trigger-Event" class="headerlink" title="Zabbix SNMP Trigger Event"></a>Zabbix SNMP Trigger Event</h1><ul><li>Zabbix v3.2之后提供了一个很便捷的功能，对同一trigger所产生的trigger进行tag（标签），产生不同的事件。<ul><li>简单说，如果trap的内容里面如果包含以下<ul><li>Source IP: 描述当前trap所产生的节点</li><li>Module: 描述当前trap所产生的应用/模块</li><li>Problem: 描述了trap产生的原因</li><li>Severity: 描述严重性</li><li>ErrorCode：描述错误码</li><li>Timestamp: 描述当前trap发起的时间</li></ul></li><li>在Zabbix的trigger配置里面，用 <em>Problem expression</em> 正则表达式，根据trap的内容去匹配，来产生trigger。并且能提供了用正则表达式去把上述特征从内容里面提取出来，作为trigger事件的tag。</li><li>zabbix还提供了清理对应事件的机制。 通过 <em>Recovery expression</em> 正则表达式匹配出用于清理问题的trap，自定义事件对应的唯一ID (<em>Tag for matching</em>)，用于问题事件和清理事件的关联，从而清理事件能把对应的问题事件进行修正。</li><li>问题清理事件同样有通知功能。</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/KasperDeng/kasperdeng.github.io/master/images/zabbix/zabbix_trigger_config.jpg" alt="grafana-event-panel"></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>尤其对于用SNMP trap去上报同一个系统的不同的状态，不同的事件是十分便利的。可以通过统一的机制，进行标签分类，划分出不同的事件。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>虽然zabbix提供了tag对事件进行分类，但是在页面显示的展现方面还是不完善。<ul><li>事件只有自定义的标签，仍然沿用该trigger的严重程度(Severity)，如果相关的事件都由一个trigger所产生的，所有相关的事件都处于同一个严重程度。具体看下图。</li></ul></li></ul><h1 id="Zabbix-Event-Dashboard"><a href="#Zabbix-Event-Dashboard" class="headerlink" title="Zabbix Event Dashboard"></a>Zabbix Event Dashboard</h1><ul><li>Problem事件都在监控下的Problem页面呈现。未被处理的事件处于红色的Problem状态。已解决的事件处于绿色的<strong>Resovled</strong>状态，后续会消失掉。</li><li>Problem页面的缺点<ul><li>如上说，同一trigger下的事件无法根据内容设置严重程度，都是显示该trigger的严重程度。</li><li>事件的标签如果比较多的话，不能在页面全部显示，龟缩在缩略列表，要手动点开去看，比较麻烦。</li><li>事件的标签默认是按字母序排列，想让比较重要的标签（比如问题描述）优先显示，就要好好考量下tag的名称。</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/KasperDeng/kasperdeng.github.io/master/images/zabbix/zabbix_problem_panel.jpg" alt="zabbix-problem-panel"></p><h2 id="Grafana-Zabbix"><a href="#Grafana-Zabbix" class="headerlink" title="Grafana-Zabbix"></a>Grafana-Zabbix</h2><ul><li>阿历山大同学的 <a href="https://github.com/alexanderzobnin/grafana-zabbix">grafana-zabbix</a> 插件有一个trigger面板的功能，但跟zabbix的problem页面遇到的问题是一样的，只是样式比较好看而已。</li><li>基于阿历山大同学的插件，Kasper同学的 <a href="https://github.com/kasperdeng/grafana-zabbix">grafana-zabbix</a> 里面新增了一个事件面板，用表格的方式呈现事件中的标签内容，默认的标签key要有：<ul><li>Source Host</li><li>Severity</li><li>Problem</li><li>module</li><li>ErrorCode</li></ul></li><li><code>Severity</code> tag是用于解决zabbix页面中事件严重程度的问题，所以trap中有最好带上<code>Severity</code>的内容。</li><li>事件表格能够按事件的严重性和age进行排序。</li><li>事件表格能够按照事件的状态呈现不同的颜色。已解决的事件会显示它被哪个事件(EventId)处理的，并显示绿色的样式，表示<em>Resolved</em>。</li><li>插件还增强了Annotation(show events on graph)的功能，能把事件中所有的tag在graph里面显示出来。</li></ul><p><img src="https://raw.githubusercontent.com/KasperDeng/kasperdeng.github.io/master/images/zabbix/grafana_event_panel.jpg" alt="grafana-event-panel"></p><p><img src="https://raw.githubusercontent.com/KasperDeng/kasperdeng.github.io/master/images/zabbix/grafana_annotation.jpg" alt="grafana-annotation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix snmp trap</title>
      <link href="/2016/11/12/2016-11-12-zabbix-snmp-trap/"/>
      <url>/2016/11/12/2016-11-12-zabbix-snmp-trap/</url>
      
        <content type="html"><![CDATA[<h1 id="SNMP"><a href="#SNMP" class="headerlink" title="SNMP"></a>SNMP</h1><ul><li>SNMP - Simple Network Management Protocol<ul><li>TCP/IP协议族的一部分</li><li>能够使网络设备之间能够方便地交换管理信息</li><li>能够让网络管理员管理网络的性能，发现和解决网络问题及进行网络的扩充</li></ul></li><li>SNMP管理设备有查询(query)和上报(trap)两种方式</li><li>SNMP TRAP<ul><li>SNMP中标准的上报机制</li></ul></li></ul><h1 id="Zabbix的SNMP-TRAP"><a href="#Zabbix的SNMP-TRAP" class="headerlink" title="Zabbix的SNMP TRAP"></a>Zabbix的SNMP TRAP</h1><ul><li>zabbix既可以<strong>查询</strong>SNMP agent设备，也支持设备<strong>上报</strong>SNMP trap, 本文主讲<code>SNMP Trap</code></li><li><p>zabbix对于SNMP trap的支持，是需要依赖外部的工具，在Liunx上，主要就是<code>SNMPtrapd</code>和<code>SNMPtt</code></p><ul><li>SNMPTrapd - 是一个用于接收外围snmp agent设备上报的SNMP Trap的一个守护进程</li><li>SNMPtt - Trap Translator， 简单说就是用于翻译或格式化SNMP Trap的，最后将结果写到文件。</li></ul></li><li><p>消息处理流程<br><img src="http://www.plantuml.com/plantuml/png/RKwz3e9039xjKpGuym8C9ZeO1pKcEBaLQU2IetSvgl3u7g90Z9sQxzzJK7CtdaGnbyPlAnQ5mlMOtAWeJ8yvXoS7FBXM4rmVJLNhpZuOLdvXRQDL0_do3wo0drjIrwZU6yj_oR5wR0QM4kCWW6bVkfaBCypFfmiEFqmWfb-9PdWdQx4cAMqC6y4t_rsG3MPfBIdFMHZrs0KJCUigM0xwCJTEZBg0XCBT7F02" alt="snmp-trap-2-zabbix"></p></li><li><p>安装：依赖包</p><ul><li>这里以RedHat 7/CentOS 7为例子，记录需要用到的工具以及相关的依赖包（以下有链接的一般表示在系统默认的软件包管理器里面缺失的，需要搜索下载安装）</li></ul></li></ul><pre><code class="shell">net-snmp.x86_64 (for snmptrapd)[snmptt](http://rpm.pbone.net/index.php3/stat/4/idpl/27126799/dir/redhat_el_7/com/snmptt-1.4-0.9.beta2.el7.noarch.rpm.html)   \--- [perl-Config-IniFiles](http://rpm.pbone.net/index.php3/stat/4/idpl/29944336/dir/redhat_el_7/com/perl-Config-IniFiles-2.83-4.1.noarch.rpm.html)        \--- perl-List-MoreUtils.x86_64   \--- [perl-Net-SNMP](http://rpm.pbone.net/index.php3/stat/4/idpl/6028905/dir/redhat_7.x/com/perl-Net-SNMP-v5.0.1-1.pp-rh73.noarch.rpm.html)        \--- perl-Digest-HMAC.noarch        \--- perl-Digest-MD5.x86_64        \--- perl-Digest-SHA.x86_64        \--- perl-Digest-SHA1.x86_64net-snmp-utils.x86_64 (for snmptrap)</code></pre><h1 id="配置snmptrapd"><a href="#配置snmptrapd" class="headerlink" title="配置snmptrapd"></a>配置snmptrapd</h1><ul><li><code>/etc/snmp/snmptrapd.conf</code><ul><li>配置snmptrapd默认的handler是snmptt, e.g. <code>traphandle default /usr/sbin/snmptt</code></li><li>配置是否禁止做身份验证等</li></ul></li><li>检查snmptrapd启动服务(e.g. <code>/usr/lib/systemd/system/snmptrapd.service</code>)所带的参数是否满足需求, 默认安装后的启动参数比较弱爆，建议添加以下的参数<ul><li><code>-Lf [Log file]</code>: Log messages to the specified file. snmptrapd的日志文件，用于检查或记录是否收到对应的SNMP trap</li><li>REF: <a href="http://net-snmp.sourceforge.net/docs/man/snmptrapd.html" target="_blank" rel="noopener">http://net-snmp.sourceforge.net/docs/man/snmptrapd.html</a></li></ul></li><li>添加snaptrapd作为默认启动服务，跟zabbix server service的behavior保持一致<ul><li>REHL 6.x <code>chkconfig snmptrapd on</code></li><li>REHL/CentOS 7.x <code>systemctl enable snmptrapd</code></li></ul></li></ul><h1 id="配置snmptt"><a href="#配置snmptt" class="headerlink" title="配置snmptt"></a>配置snmptt</h1><ul><li><code>/etc/snmp/snmptt.ini</code><ul><li>配置snmptt程序<ul><li>log_file = /tmp/my_zabbix_traps.tmp  // 翻译的SNMP trap写到的文件路径, 一定要跟Zabbix Server的配置<code>SNMPTrapperFile</code>一致</li><li>date_time_format = %H:%M:%S %Y/%m/%d</li><li>使用snmptt的standalone model</li></ul></li></ul></li></ul><pre><code class="shell"># Set to either &#39;standalone&#39; or &#39;daemon&#39;# standalone: snmptt called from snmptrapd.conf# daemon: snmptrapd.conf calls snmptthandler</code></pre><ul><li><code>/etc/snmp/snmptt.conf</code><ul><li>配置如何翻译由snmptrapd扔过来的snmp trap</li><li>跟具体设备上报业务相关<ul><li>主要配置你监测的设备所产生的SNMP trap的事件(事件的ID, 对应的OID，事件名称，状态等)</li><li>配置要翻译成/格式化的格式</li></ul></li><li>对于Zabbix<ul><li>记得在<code>FORMAT</code>关键字后添加<code>ZBXTRAP $aA</code>，e.g. <code>FORMAT ZBXTRAP $aA</code>，表示从某个host (这里是IP/DNS name, 需要对应监控的机器的SNMP interface上配置的IP/DNS name) 上收到了一个Zabbix需要关注的SNMP trap</li><li>Zabbix server就是通过扫TRAP文件中新的TRAP中是否带这些关键字从而再去SNMP trap item里面去匹配的。</li></ul></li></ul></li></ul><h1 id="配置-Zabbix"><a href="#配置-Zabbix" class="headerlink" title="配置 Zabbix"></a>配置 Zabbix</h1><ul><li>修改<code>/etc/zabbix/zabbix_server.conf</code><ul><li>StartSNMPTrapper = 1  // 让zabbix支持接收SNMP trap</li><li>SNMPTrapperFile= /tmp/my_zabbix_traps.tmp // 指定zabbix去扫的SNMP Trap文件，也就是SNMPtt翻译后所写的文件</li></ul></li><li>重启zabbix server: <code>systemctl restart zabbix-server</code></li></ul><h1 id="配置zabbix的SNMP-Trap-Template"><a href="#配置zabbix的SNMP-Trap-Template" class="headerlink" title="配置zabbix的SNMP Trap Template"></a>配置zabbix的SNMP Trap Template</h1><ul><li>SNMP Trap Item<ul><li>选type为snmp trap，设置key和log time format<ul><li>Key: snmptrap[“Status Events”]: 这里是正则匹配的(snmptrap[<regex>])，匹配的是SNMP trap的事件的名称</regex></li><li>Log time format: hh:mm:ss yyyy/MM/dd</li></ul></li><li>当zabbix server收到相关的SNMP trap，并能匹配到对应的item的时候。可以在监控页面的<code>latest data</code>看回这个item的详细历史记录</li></ul></li></ul><ul><li>SNMP Trap Triggers<ul><li>可以配置产生trigger的条件，根据SNMP trap item的统计信息来做条件。</li><li>可以配置trigger恢复(问题解决)的条件</li></ul></li></ul><h1 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h1><ul><li>注意串通整个流程过程中各个组件的日志。因为SNMP trap on Zabbix中间流经了好几个组件，任何一个出问题，都会导致SNMP trap没法在Zabbix上被监测到。</li></ul><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><ul><li>SELINUX的安全问题<ul><li>如果打开了SELINUX，很可能会导致文件的访问权限问题。要时刻关注下<code>/var/log/audit/audit.log</code><ul><li>比如SNMPtt写的log文件，Zabbix Server没权限读取，尽管把文件的权限全打开。</li></ul></li><li>如果发现SELINUX所block的问题，需要用到<code>audit2allow</code>去解决，参照以下例子。</li><li>REF: <a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/SELinux_Users_and_Administrators_Guide/sect-Security-Enhanced_Linux-Troubleshooting-Fixing_Problems.html#sect-Security-Enhanced_Linux-Fixing_Problems-Allowing_Access_audit2allow" target="_blank" rel="noopener">https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/SELinux_Users_and_Administrators_Guide/sect-Security-Enhanced_Linux-Troubleshooting-Fixing_Problems.html#sect-Security-Enhanced_Linux-Fixing_Problems-Allowing_Access_audit2allow</a></li></ul></li></ul><pre><code class="shell">shell&gt;tail -f /var/log/audit/audit.logtype=SYSCALL msg=audit(1478754989.834:4148): arch=c000003e syscall=2 success=no exit=-13 a0=25de540 a1=0 a2=7ffe07dedda0 a3=0 items=0 ppid=15596 pid=15626 auid=4294967295 uid=995 gid=992 euid=995 suid=995 fsuid=995 egid=992 sgid=992 fsgid=992 tty=(none) ses=4294967295 comm=&quot;zabbix_server&quot; exe=&quot;/usr/sbin/zabbix_server_mysql&quot; subj=system_u:system_r:zabbix_t:s0 key=(null)type=AVC msg=audit(1478754990.835:4149): avc:  denied  { read } for  pid=15626 comm=&quot;zabbix_server&quot; name=&quot;snmptt.log&quot; dev=&quot;xvda1&quot; ino=75528756 scontext=system_u:system_r:zabbix_t:s0 tcontext=system_u:object_r:snmpd_log_t:s0 tclass=file&quot;shell&gt; echo &quot;type=SYSCALL msg=audit(1478754989.834:4148): arch=c000003e syscall=2 success=no exit=-13 a0=25de540 a1=0 a2=7ffe07dedda0 a3=0 items=0 ppid=15596 pid=15626 auid=4294967295 uid=995 gid=992 euid=995 suid=995 fsuid=995 egid=992 sgid=992 fsgid=992 tty=(none) ses=4294967295 comm=&quot;zabbix_server&quot; exe=&quot;/usr/sbin/zabbix_server_mysql&quot; subj=system_u:system_r:zabbix_t:s0 key=(null)type=AVC msg=audit(1478754990.835:4149): avc:  denied  { read } for  pid=15626 comm=&quot;zabbix_server&quot; name=&quot;snmptt.log&quot; dev=&quot;xvda1&quot; ino=75528756 scontext=system_u:system_r:zabbix_t:s0 tcontext=system_u:object_r:snmpd_log_t:s0 tclass=file&quot; | audit2allow -M zabbixsemanage******************** IMPORTANT ***********************To make this policy package active, execute:semodule -i zabbixsemanage.ppshell&gt; lltotal 8-rw-r--r--. 1 root root 942 Nov 10 05:38 zabbixsemanage.pp-rw-r--r--. 1 root root 172 Nov 10 05:38 zabbixsemanage.teshell&gt; semodule -i zabbixsemanage.pp</code></pre><ul><li><p>网络上的安全问题</p><ul><li>在云上，注意安全组没有阻止了对应SNMP的端口的访问。<ul><li>port: 161, protocol: UDP</li><li>zabbix agent: 10050, protocol: TCP</li></ul></li></ul></li><li><p>绑定SNMP Trap模板的limitation</p><ul><li>本想通过建立SNMP Trap的template，这样就能方便地通过zabbix自发现或者探针自动注册的方式，通过<code>action</code>把<code>SNMP Trap template</code>绑在被监测机上。但是zabbix目前没有自动发现SNMP interface的功能，所以会导致<code>action</code>里面所有的绑定tempalte得操作失败。所以，对于<code>SNMP Trap</code>的功能，需要在<code>zabbix server</code>上为每一台新加入的被检测机配置<code>SNMP Trap Interface</code>并绑定我们自定义做好的<code>SNMP Trap Template</code></li><li><a href="https://support.zabbix.com/browse/ZBXNEXT-1212" target="_blank" rel="noopener">https://support.zabbix.com/browse/ZBXNEXT-1212</a></li></ul></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://www.zabbix.com/documentation/3.2/manual/config/items/itemtypes/snmptrap" target="_blank" rel="noopener">SNMP traps - zabbix official</a></li><li><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-snmp/" target="_blank" rel="noopener">浅谈 Linux 系统中的 SNMP Trap</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix</title>
      <link href="/2016/09/19/2016-09-19-zabbix/"/>
      <url>/2016/09/19/2016-09-19-zabbix/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在devops的世界，监控比自动化更加的重要。好的监控工具辅助，自然事半功倍，而监控工具可谓百家争鸣。</p><ul><li>有免费开源：<a href="https://www.nagios.org/" target="_blank" rel="noopener">nagios</a>, <a href="http://www.opennms.org/en" target="_blank" rel="noopener">OpenNMS</a></li><li>商业开源：<a href="http://www.zabbix.org/" target="_blank" rel="noopener">zabbix</a></li><li>免费不开源：<a href="http://cloudinsight.oneapm.com/" target="_blank" rel="noopener">cloud insight</a></li><li>SasS-based：<a href="https://www.datadoghq.com" target="_blank" rel="noopener">Datadog</a>， <a href="https://www.hostedgraphite.com/" target="_blank" rel="noopener">Hosted Graphite</a></li></ul><p>当然了，有能力、人力、财力，也可以按照 <code>statsd/collectd + graphite/influxDB/openTSDB + grafana</code>的模式构建自己的监控系统，其实很多初创团队利用这些免费开源的工具构造一体化(all in one)的免费不开源/提供企业收费服务的工具。</p><p>zabbix是一款开源的网络及应用监控的工具，愿景是给业界提供高级的监控管理方案。最早发布于2001年，2005年成立专职公司为企业级客户提供强大的技术支持。<br>是一款可靠的监控工具，方便devops团队的高效协助与沟通，数据的可视化效果，告警的方式，丰富的apis可用于自动化运维。<br>社区与论坛活跃，强大，<a href="http://www.zabbix.org/wiki/Main_Page" target="_blank" rel="noopener">wiki</a>资源丰富。<br>国内有不少选其作为监控的方案，唯品会，京东，PPTV。</p><p>不过，正如<code>esty</code>所说，一切监控软件最后都发展成又一个nagios。所以寻找当下最合适的就好了。</p><ul><li>特点<ul><li>分布式监控</li><li>自动发现功能(LLD - Low-level discovery)<ul><li>discovery of file systems (vfs.fs.discovery)</li><li>discovery of network interfaces (net.if.discovery)</li><li>discovery of CPUs and CPU cores (system.cpu.discovery)</li><li>discovery of SNMP OIDs (discovery[{MACRO1}, oid1, {MACRO2}, oid2, …,])</li><li>discovery using ODBC SQL queries (db.odbc.discovery[<description>,<dsn>])</dsn></description></li><li>discovery of Windows services (service.discovery)</li></ul></li><li>监控方式：agentd, snmp, jmx, impi</li><li>告警机制，趋势预测，预警故障</li><li>模板式定义需采集的测量值，支持宏定义</li><li><strong><a href="http://www.zabbix.org/wiki/Docs/api/libraries" target="_blank" rel="noopener">丰富的api</a></strong> 给自动化运维和二次开发提供了强有力的支持</li><li>生态健全，插件丰富，方便对接各种系统和前端展示页面(e.g. grafana)</li></ul></li><li>缺点<ul><li>相对graphite, influxDB, openTSDB来说，一切数据是只读的，只是依赖输入的数据做可视化，但不能对数据进行运算（切片，聚合）。</li></ul></li><li>注意事项<ul><li>对弈监控的机器数量或者指标快速增加的场景，一定要考虑接收数据的量,服务端性能(与数据库的交互)，zabbix proxy的数量。力求减轻服务端的压力，避免内存积压。</li></ul></li></ul><p>zabbix是采用C语言实现的，采用的是<code>LAMP(Linux + Apache + MySQL + PHP)</code>的组建方式。</p><p>zabbix最常用的是通过被监控机上运行的agentd进行探针式数据采集，提供了被动方式(passive)和主动方式(active)。基于json格式进行数据传输。</p><ul><li>主动：agent请求server，根据配置的<code>RefreshActiveChecks</code>间隔主动获取监控项列表，并主动将监控项内需要检测的数据提交给server/proxy。</li><li>被动：server向agent请求获取监控项的数据，agent返回数据。</li></ul><p><img src="https://raw.githubusercontent.com/KasperDeng/kasperdeng.github.io/master/images/zabbix/zabbix-passive-active.png" alt="zabbix-passive-active"></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li>方式<ul><li>可以选择操作系统的包管理器(支持RedHat7/CentOS7 yum 和 Debian7&amp;8 or Ubuntu 14.04LTS&amp;16.04LTS的apt)，通过官方的repository进行安装。</li><li>通过源码安装。</li><li>对于3.0以上版本，更提供了docker，更加的便捷。</li></ul></li><li><a href="https://www.zabbix.com/documentation/3.2/manual/installation/install_from_packages" target="_blank" rel="noopener">包管理器方式安装</a><ul><li>RedHat/CentOS的包依赖：<ul><li>fping, iksemel, libssh2 packages<ul><li>zabbix官方提供了相关的包，在<a href="http://repo.zabbix.com/non-supported/rhel/7/x86_64/，只针对x64。" target="_blank" rel="noopener">http://repo.zabbix.com/non-supported/rhel/7/x86_64/，只针对x64。</a></li></ul></li><li>安装过程中还发现依赖<code>php-bcmath</code>和<code>php-mbstring</code>，具体小版本，可以根据yum的依赖检查的信息在<a href="http://rpm.pbone.net/搜索下载" target="_blank" rel="noopener">http://rpm.pbone.net/搜索下载</a></li><li>以上的包最方便的方式还是自己建yum repo</li></ul></li></ul></li></ul><pre><code class="shell">copy all dependent rpms to ~/repo/packagesshell&gt;yum install -y createreposhell&gt;createrepo ~/repo/packagesshell&gt;create zabbix.repo in /etc/yum.repo.d/</code></pre><pre><code class="shell">[ece-zabbix]name=ece-zabbixbaseurl=file:///root/repo/enabled=1gpgcheck=0metadata_expire=0cost=500</code></pre><ul><li>PHP版本：zabbix3.0要求PHP 5.4以上版本，不支持PHP7. RedHat6/CentOS6 官方repo只有php5.3.3，需要利用三方源升级到php5.4。<ul><li>RedHat6/CentOS6升级php<ul><li>下载相关的php包（看下面的例子）：<a href="https://repo.webtatic.com/yum/el6/x86_64/" target="_blank" rel="noopener">https://repo.webtatic.com/yum/el6/x86_64/</a> 并用createrepo创建本地的php repo</li></ul></li></ul></li></ul><pre><code class="shell">yum erase php php-bcmath php-cli php-common php-gd php-mbstring php-mysql php-pdo php-xmlyum install php56w php56w-bcmath php56w-cli php56w-common php56w-gd php56w-mbstring php56w-mysql php56w-pdo php56w-xml</code></pre><ul><li>数据库<ul><li>Zabbix 支持使用MySQL和Postgres</li><li>MySQL-server最好安装5.6以上版本，其他版本性能偏低。</li></ul></li><li>启动服务：出于安全考虑，最好创建<code>zabbix</code>用户和用户组，用来启动server/agent的服务<ul><li><code>systemctl start zabbix-server</code></li><li><code>systemctl start httpd</code></li></ul></li></ul><ul><li><a href="https://www.zabbix.com/documentation/3.2/manual/installation/install" target="_blank" rel="noopener">源码安装</a>，基于RedHat<ul><li>依赖工具：</li></ul></li></ul><pre><code class="shell">yum install -7 gcc.x686_64 make.x686_64 mysql-devel.x686_64 libxml2-devel.x686_64 net-snmp-devel.x686_64 libcurl-devel.x686_64</code></pre><ul><li>php version<ul><li>zabbix 3.0: &gt; PHP5.4</li><li>zabbix 2.2: PHP3</li></ul></li><li>PHP Web Frontend install<ul><li>check whether selinux blocks apache/httpd access<ul><li><code>getenforce</code>/<code>setenforce 0/1</code></li><li><code>getsebool &lt;flagName&gt; or -a</code>/<code>sesebool -P &lt;flagName&gt; &lt;value&gt;</code></li><li>sestatus</li></ul></li><li>check apache/httpd error log <code>/var/log/httpd/error_log</code><ul><li>set <code>LogLevel</code> to <code>debug</code> in <code>/etc/httpd/conf/httpd.conf</code></li></ul></li></ul></li><li>reference: <a href="http://www.hi-linux.com/2016/03/29/CentOS%206%E4%B8%8B%E5%AE%89%E8%A3%85Zabbix%203.0/" target="_blank" rel="noopener">http://www.hi-linux.com/2016/03/29/CentOS%206%E4%B8%8B%E5%AE%89%E8%A3%85Zabbix%203.0/</a></li><li>源码安装需要自己封一套脚本在<code>/etc/init.d/</code>，可以参考现有的zabbix-server &amp; zabbix-agent的rpm包里面的</li></ul><h1 id="configuration"><a href="#configuration" class="headerlink" title="configuration"></a>configuration</h1><ul><li>zabbix server<ul><li>config location<ul><li>Package Installation: <code>/etc/zabbix/zabbix_server.conf</code></li><li>Source Installation: <code>/usr/local/etc/zabbix_server.conf</code> and <code>/usr/local/etc/zabbix_agentd.conf</code> </li></ul></li><li>主要配置数据库的host，数据库名称，用户名，密码</li></ul></li><li>zabbix frontend<ul><li>主要是用apache，配置在<code>/etc/httpd/conf.d/zabbix.conf</code> </li><li>配置下时区就好了。</li></ul></li><li>zabbix agentd<ul><li>没什么好说的，奉行简单化风格，尽量对被监控机无侵入，已支持重用指标的收集。</li><li>配好zabbix server的地址。</li><li>创建zabbix用户启动agent。</li></ul></li></ul><pre><code class="shell">groupadd zabbixuseradd -g zabbix zabbix</code></pre><ul><li>theme<ul><li>还是深色的比较炫，比较专业的样子。</li></ul></li><li>screen<ul><li>可以在页面中自定义构建监测视图。</li></ul></li></ul><h1 id="log"><a href="#log" class="headerlink" title="log"></a>log</h1><ul><li>server/agent logs location<ul><li>Package Installation: <code>/var/log/zabbix/</code></li><li>Source Installation: default in <code>/tmp/zabbix_server.log</code>, value is set in <code>/usr/local/etc/zabbix_server.conf</code></li></ul></li><li>apache log in <code>/var/log/httpd/</code></li></ul><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><ul><li>zabbix 3.0，官方文档只给出了RedHat7/CentOS7的官方respository。虽然有针对RedHat5/6的repo，但是好像已经deprecated，实际上里面缺少了zabbix-server，zabbix-web。<ul><li><a href="http://repo.zabbix.com/zabbix/3.0/rhel/7/x86_64/" target="_blank" rel="noopener">RHEL7 repo</a></li><li><a href="http://repo.zabbix.com/zabbix/3.0/rhel/6/x86_64/" target="_blank" rel="noopener">RHEL6 repo</a></li><li><a href="http://repo.zabbix.com/zabbix/3.0/rhel/5/x86_64/" target="_blank" rel="noopener">RHEL5 repo</a></li><li>针对RedHat6/CentOS X64，有github project做了相关的rpm包<ul><li><a href="https://github.com/zabbixcn/zabbix3.0-rpm">https://github.com/zabbixcn/zabbix3.0-rpm</a></li></ul></li></ul></li><li>php相关的依赖包比较多，大部分在RedHat的官方repo会有，除了<code>php_bcmath</code>和<code>php_mbstring</code>。自行搜索下载的时候注意版本，php所有相关的包都是要align在统一的小版本上的，<br>比如<code>5.3.3-46.el6_7.1</code>，如果你下载的不是一个版本的话，yum安装的时候会出现<code>Dependency Resolution</code>问题。</li><li>mysql数据库用简单的mysql server就好了。曾尝试用mysql cluster，遇到不少问题。<ul><li>官方的sql要求用的engine是innodb，若狗所用的mysql cluster是NDBCLUSTER做storage engine的话需要打开innodb support，才能顺利导入zabbix的schema, data …</li><li>zabbix2.2 web setup的时候要测试和mysql的连接，但用mysql cluster的话死活连不过去，而且不能next去下一步。但3.0的版本只需要填数据库信息，不需要测试连接性，关键能next啊，与数据连接有问题的话后面再改配置呗。</li></ul></li><li>zabbix dashboard显示”zabbix server is not running”<ul><li>原因: blocked by SELINUX</li></ul></li></ul><pre><code class="shell">shell&gt;tail -f /var/log/audit/audit.logr:zabbix_agent_port_t:s0 tclass=tcp_sockettype=SYSCALL msg=audit(1474187313.154:2439): arch=c000003e syscall=42 success=no exit=-13 a0=c a1=7f800b6ec850 a2=1c a3=ff00 items=0 ppid=2048 pid=2057 auid=500 uid=48 gid=48 euid=48 suid=48 fsuid=48 egid=48 sgid=48 fsgid=48 tty=  (none) ses=2 comm=&quot;httpd&quot; exe=&quot;/usr/sbin/httpd&quot; subj=unconfined_u:system_r:httpd_t:s0 key=(null)type=AVC msg=audit(1474187313.154:2440): avc:  denied  { name_connect } for  pid=2057 comm=&quot;httpd&quot; dest=10050 scontext=unconfined_u:system_r:httpd_t:s0 tcontext=system_u:object_r:zabbix_agent_port_t:s0 tclass=tcp_socketshell&gt; /usr/sbin/getsebool -a | grep httpdallow_httpd_anon_write --&gt; offallow_httpd_mod_auth_ntlm_winbind --&gt; offallow_httpd_mod_auth_pam --&gt; offallow_httpd_sys_script_anon_write --&gt; offhttpd_builtin_scripting --&gt; onhttpd_can_check_spam --&gt; offhttpd_can_network_connect --&gt; offhttpd_can_network_connect_cobbler --&gt; offhttpd_can_network_connect_db --&gt; offhttpd_can_network_memcache --&gt; offhttpd_can_network_relay --&gt; offhttpd_can_sendmail --&gt; offhttpd_dbus_avahi --&gt; onhttpd_dbus_sssd --&gt; offhttpd_enable_cgi --&gt; onhttpd_enable_ftp_server --&gt; offhttpd_enable_homedirs --&gt; offhttpd_execmem --&gt; offhttpd_manage_ipa --&gt; offhttpd_read_user_content --&gt; offhttpd_run_preupgrade --&gt; offhttpd_run_stickshift --&gt; offhttpd_serve_cobbler_files --&gt; offhttpd_setrlimit --&gt; offhttpd_ssi_exec --&gt; offhttpd_tmp_exec --&gt; offhttpd_tty_comm --&gt; onhttpd_unified --&gt; onhttpd_use_cifs --&gt; offhttpd_use_fusefs --&gt; offhttpd_use_gpg --&gt; offhttpd_use_nfs --&gt; offhttpd_use_openstack --&gt; offhttpd_verify_dns --&gt; offshell&gt; setsebool -P httpd_can_connect_zabbix on   // Zabbix 3.x新增加的SE boolshell&gt; setsebool -P httpd_can_network_connect on  // for version &lt; zabbix 3.x</code></pre><p>  <img src="https://raw.githubusercontent.com/KasperDeng/kasperdeng.github.io/master/images/zabbix/zabbix-server-not-running.jpg" alt="zabbix-server-not-running"></p><ul><li>Web frontend blocked by <code>403: Permission Denied</code><ul><li>check selinux<ul><li>check <code>/var/log/audit/audit.log</code></li><li>change <code>SELINUX=enforcing</code> to <code>SELINUX=disable</code> in <code>/etc/selinux/config</code> and reboot</li><li><code>setenforce 0</code> and <code>getenforce</code> or <code>sestatus</code> to get current mode status</li><li>check the security context of PHP file. The type is <code>httpd_user_content_t</code><pre><code>ls -Z /var/www/html/zabbix</code></pre></li><li>check the owernship and file mode of your PHP file content. apache needs execution permission.</li></ul></li></ul></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://codeascraft.com/2011/02/15/measure-anything-measure-everything/" target="_blank" rel="noopener">Measure Anything, Measure Everything</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang development environment</title>
      <link href="/2015/04/15/2015-04-15-go-dev-env/"/>
      <url>/2015/04/15/2015-04-15-go-dev-env/</url>
      
        <content type="html"><![CDATA[<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><ul><li>Download go <ul><li><a href="https://golang.org/dl/" target="_blank" rel="noopener">official</a> &amp; <a href="https://golang.org/doc/install" target="_blank" rel="noopener">Getting Started</a></li><li><a href="http://www.golangtc.com/download" target="_blank" rel="noopener">golang中国</a></li></ul></li><li>Go Complier: <ul><li>offcial: gc</li><li>GNU GC: gccgo</li></ul></li><li>Go supports 3 instruction sets<ol><li>amd64 (a.k.a. <code>x86-64</code>); 6g,6l(Plan9 gc),6c,6a // support x84-64, naming as amd64<br> is to amd’s contribution of inventing 64bit instruction set</li><li>386 (a.k.a. <code>x86</code> or <code>x86-32</code>); 8g,8l,8c(Plan9 gc),8a</li><li>arm (a.k.a. ARM); 5g,5l,5c(Plan9 gc),5a</li></ol></li><li>Set Env Variables<ul><li>GOBIN: C:\Go\bin (optional, if no GOBIN, GOPATH will be used)</li><li>GOARCH: x86-32bit: 386, x86-64bit: amd64, ARM: amr (android)</li><li>GOOS: windows</li><li>GOROOT: C:\Go</li><li>GOPATH: C:\GOPATH<ul><li>To specify directories outside of $GOROOT that contain the source for Go projects and their binaries.</li></ul></li><li>Add to PATH: %GOBIN%</li></ul></li><li>Multi-Version GO Env<ul><li><a href="https://github.com/moovweb/gvm">GVM</a><ul><li>an interface to manage Go versions, like NVM(Nodejs Version Manager), RVM (Ruby Version Manager)</li></ul></li></ul></li><li>Reference in astaxie/build-web-application-with-golang<ul><li><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/en/01.1.md">En</a></li><li><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.1.md">Zh</a></li></ul></li></ul><h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><ul><li><a href="http://dominik.honnef.co/posts/2014/12/an_incomplete_list_of_go_tools/" target="_blank" rel="noopener">Go Tools</a></li><li><a href="http://go-lang.cat-v.org/dev-utils" target="_blank" rel="noopener">dev-utilies</a></li><li><a href="https://github.com/jstemmer/gotags">gotags</a></li><li><a href="https://github.com/lyosha/ctags-go">ctags-go</a></li><li><a href="https://github.com/dgryski/vim-godef">vim-godef</a></li></ul><h1 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h1><h2 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h2><ul><li>Install package control<ul><li>“ctrl + `” or Menu: View -&gt; Show console: input</li></ul></li></ul><pre><code class="shell">import urllib.request,os; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen( &#39;http://sublime.wbond.net/&#39; + pf.replace(&#39; &#39;,&#39;%20&#39;)).read())</code></pre><ul><li>Restart sublime</li></ul><ul><li>Install GoSublime<ul><li>ctrl+shift+p -&gt; input install<cr> -&gt; input GoSublime <cr></cr></cr></li><li>preferences —&gt; package setting —&gt; gosublime —&gt; setting default, update <strong>env</strong></li><li>Restart sublime</li></ul></li></ul><pre><code class="json">{    &quot;env&quot;: {            &quot;path&quot;:&quot;C:\\Go\\bin&quot;,            &quot;GOROOT&quot;:&quot;C:\\Go&quot;,            &quot;GOPATH&quot;:&quot;C:\\GOPATH&quot;,            &quot;GOARCH&quot;:&quot;amd64&quot;,            &quot;GOOS&quot;:&quot;windows&quot;,            &quot;PATH&quot;:&quot;%GOBIN%;%PATH%&quot;    },    &quot;comp_lint_enabled&quot;: true,    &quot;comp_lint_commands&quot;: [        {&quot;cmd&quot;: [&quot;go&quot;, &quot;install&quot;]}    ],    &quot;on_save&quot;: [        {&quot;cmd&quot;:&quot;gs_comp_lint&quot;}    ]}</code></pre><ul><li><code>ctrl+p -&gt; gosublime</code>: to find related gosublime functions and key binding</li><li>keybinds: ctrl+.,ctrl+g: definition</li><li>Build<ul><li>ctrl+b (cli console in sublime), then run the go commands</li></ul></li><li><p><strong>gosublime drawback</strong>: read code with goto definition but no easy way to go back.</p></li><li><p>Ref: </p><ul><li><a href="http://www.v-lover.com/2014/12/24/go-built-environment/" target="_blank" rel="noopener">http://www.v-lover.com/2014/12/24/go-built-environment/</a></li><li><a href="http://blog.buaa.us/godef-plugin-for-sublime-released/" target="_blank" rel="noopener">Godef for Sublime</a> (currently not support windows)</li></ul></li></ul><h2 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h2><ul><li>Lots of golang package support<ul><li>go-plus (but currently failed to install in my workspace)</li></ul></li></ul><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><ul><li><a href="https://github.com/fatih/vim-go">vim-go</a><ul><li>PluginInstall: Vundle: Plugin ‘fatih/vim-go’</li><li>GoInstallBinaries (need install Mercurial and add C:\Program Files\Mercurial\ to PATH)</li><li>Install ctags: e.g. In Ubuntu, sudo apt-get install ctags and in /usr/bin/ctags</li><li>Config the ctags path for tagbar: let g:tagbar_ctags_bin = ‘/usr/bin/ctags’ (Ubuntu)</li></ul></li><li>Add key mapping to .vimrc, e.g. <code>au FileType go nmap gdf &lt;plug&gt;(go-def)</code></li><li>Vim build-in <code>&lt;C-o&gt;</code> and <code>&lt;C-i&gt;</code> help back/forward of code definition naviation</li><li><code>&lt;C-x&gt;&lt;C-o&gt;</code> auto go code complete by omnicomplete system, <code>&lt;C-n&gt;</code> to select.<ul><li>Add config to vimrc to support invoke gocode for code completion</li></ul></li></ul><pre><code class="shell">&quot; Golangau BufNewFile,BufRead *.go setf goautocmd FileType go setlocal omnifunc=go#complete#Complete</code></pre><ul><li>If no config, use the gvim-ex which support it by default (unknown why)</li><li>autocompletion is dependent on the <code>gocode</code>, when golang upgrade, please upgrade the gocode by <code>go get -u github.com/nsf/gocode</code></li></ul><ul><li><a href="https://github.com/Valloric/YouCompleteMe">YouCompleteMe</a> (Code-completion for Vim, but no official support on Windows)</li><li><p>Supports in cygwin vim, using imported env variable from Windows. Currently found godef has limitation in cygwin to browse the code definition in $GOPATH/src(config problem?)</p></li><li><p><a href="http://stackoverflow.com/questions/27860178/how-to-rebuild-godef-to-work-with-go-1-4" target="_blank" rel="noopener">godef issue in go v1.4</a></p><ul><li>Need to update the <a href="http://code.google.com/p/rog-go/source/browse/exp/cmd/godef/godef.go" target="_blank" rel="noopener">godef</a> and build it by self</li></ul></li></ul><h2 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a>Notepad++</h2><ul><li>Gonpp</li></ul><h2 id="intellij"><a href="#intellij" class="headerlink" title="intellij"></a>intellij</h2><ul><li>Ref: <a href="http://www.cnblogs.com/clivelee/p/3870186.html" target="_blank" rel="noopener">http://www.cnblogs.com/clivelee/p/3870186.html</a></li><li><a href="http://github.com/go-lang-plugin-org/go-lang-idea-plugin">golang plugin</a></li><li>Setup Go project SDK</li></ul><h2 id="Gogland"><a href="#Gogland" class="headerlink" title="Gogland"></a>Gogland</h2><blockquote><p><a href="https://www.jetbrains.com/go/" target="_blank" rel="noopener">JetBrains</a>, commercial IDE, extends the IntelliJ platform</p></blockquote><ul><li>Not formal release yet. Can download an early build for trial</li></ul><h2 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h2><ul><li>Goclipse</li></ul><h2 id="Wide"><a href="#Wide" class="headerlink" title="Wide"></a>Wide</h2><ul><li><a href="https://wide.b3log.org" target="_blank" rel="noopener">Coding with Go on the Wide way</a></li></ul><h2 id="Zeus-IDE"><a href="#Zeus-IDE" class="headerlink" title="Zeus IDE"></a><a href="http://www.zeusedit.com/go.html" target="_blank" rel="noopener">Zeus IDE</a></h2><ul><li>TBD</li></ul><h2 id="LiteIDE"><a href="#LiteIDE" class="headerlink" title="LiteIDE"></a><a href="https://github.com/visualfc/liteide">LiteIDE</a></h2><blockquote><p>LiteIDE is a simple, open source, cross-platform Go IDE. Based on Qt5/Qt4</p></blockquote><ul><li>easy installation and usage</li><li>based on Qt, gui is not fashion style</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> golang IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go commands</title>
      <link href="/2015/02/15/2015-02-15-Go-Commands/"/>
      <url>/2015/02/15/2015-02-15-Go-Commands/</url>
      
        <content type="html"><![CDATA[<h1 id="go-build"><a href="#go-build" class="headerlink" title="go build"></a>go build</h1><ul><li>compile the package named by the import paths and thier dependencies</li><li><p>go build package/*.go</p><ul><li><p>if build *.go, a virtual package command-line-arguments is created internally</p><ul><li><p>$WORK/command-line-arguments/_obj/: stores the obj files</p></li><li><p>$WORK/command-line-arguments/_obj/exe/: stores the executable after link</p></li></ul></li></ul></li><li><code>-v - work</code>: print the name of the temporary work directory and do not delete it when exiting</li><li><code>-n</code>: print the commands but do not run them</li><li><code>-x</code>: as the <code>-n</code> flag but run them</li></ul><h1 id="go-install"><a href="#go-install" class="headerlink" title="go install"></a>go install</h1><ul><li><p>compile and install the package and its dependent package. The result is archive/executable and installed to $GOBIN dir</p></li><li><p>If $GOBIN not set, error promption: <code>go install: no install location for directory</code></p></li><li><code>-o</code> flag currently is not acceptable for go install</li><li>go install only accepts *.go of cmd/executable src code, not *.go of lib src code. To install libs, need run <code>go install package</code> </li></ul><h1 id="go-get"><a href="#go-get" class="headerlink" title="go get"></a>go get</h1><ul><li>download/update specific package or their dependencies</li><li><code>-d</code>: only download the source code, no package installation</li><li><code>-u</code>: update the named packages and their depenencies</li><li><code>-fix</code>: for backword compatible</li></ul><h1 id="go-list"><a href="#go-list" class="headerlink" title="go list"></a>go list</h1><blockquote><p>list package information</p></blockquote><ul><li>go list -json package: print the package strcuture in json format</li><li>text/template syntax</li></ul><pre><code>   * go list -f \{\{.ImportPath\}\} package   * go list -f \{\{.S.F\}\} package</code></pre><pre><code class="shell">$ go list -json net/http$ go list -json github.com/kasperdeng/grpcPt/client</code></pre><h1 id="go-test"><a href="#go-test" class="headerlink" title="go test"></a>go test</h1><blockquote><p>test *_test.go</p></blockquote><ul><li><code>go help testflag</code></li><li><code>-i</code>: install the test dependencies, but not compile and run it</li><li><code>-c</code>: generate test executables, but not run it</li><li><code>-bench regexp</code> 执行相应的benchmarks，例如 -bench=.</li><li><code>-cover</code> 开启测试覆盖率</li><li><code>-run regexp</code> 只运行regexp匹配的函数，例如 -run=Array 执行包含有Array开头的函数</li></ul><h1 id="godoc"><a href="#godoc" class="headerlink" title="godoc"></a>godoc</h1><pre><code class="shell">$ go get golang.org/x/tools/cmd/godoc$ godoc -http=:8080 &amp;# godoc package$ godoc net/http# godoc func$ godoc fmt Printf</code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://github.com/hyper-carrot/go_command_tutorial/blob/master/catalog.md">Go Command Turorial</a></li><li><a href="http://wiki.jikexueyuan.com/project/go-command-tutorial/" target="_blank" rel="noopener">极客学院 - GO 命令教程</a></li><li><a href="https://astaxie.gitbooks.io/build-web-application-with-golang/zh/01.3.html" target="_blank" rel="noopener">astaxie - GO命令</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>constant pool in Java/Python/Go/Javascript</title>
      <link href="/2015/02/08/2015-02-08-ConstantPool-In-Java-Python-Go-JS/"/>
      <url>/2015/02/08/2015-02-08-ConstantPool-In-Java-Python-Go-JS/</url>
      
        <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="== Java =="></a>== Java ==</h1><h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><ul><li>The constant pool contains the constants associated with the class or interface defined by the file. </li><li><strong>Constants</strong> are stored in the constant pool.<ul><li>literal strings</li><li>final variable values</li><li>fully qualified names of classes and interfaces</li><li>field names and descriptors</li><li>method names and descriptors</li></ul></li><li><strong>Symbolic references</strong> to all types, fields, and methods used by a type are stored in the constant pool<ul><li>it plays a central role in the dynamic linking of Java programs</li></ul></li><li>The constant pool is organized as a list of entries. A count of the number of entries in the list, constant_pool_count, precedes the actual list, constant_pool.</li></ul><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><ul><li>For quick object creation. Just get one from pool if it exists, otherwise create one in the pool</li><li>The runtime constant pool is a subset of the method area , different to heap memory for “new” object creation</li></ul><h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><ul><li>Wrapper classes of primitive (Byte, Short, Integer, Long, Character, Boolean, no Float and Double) are implemented the constant pool.</li><li>Byte, Short, Integer, Long, Character only create constants object in pool when value (-128~127]</li><li>IntegerCache<ul><li>default range (-128, 127]</li><li>high can be configured when VM init by property java.lang.Integer.IntegerCache.high property, but MAX is Integer.MAX_VALUE</li></ul></li><li>All literal strings and string-valued constant expressions are interned.<ul><li>String.intern() // get from pool if exists or add this new String object to the pool</li></ul></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="http://javapapers.com/core-java/java-jvm-memory-types/" target="_blank" rel="noopener">Java (JVM) Memory Types</a></li></ul><h1 id="python"><a href="#python" class="headerlink" title="== python =="></a>== python ==</h1><h2 id="How-1"><a href="#How-1" class="headerlink" title="How"></a>How</h2><ul><li>int cache range [-5, 257)</li><li>range() vs. xrange().  xrange uses an iterator instead of generating the entire list, so uses less memory</li><li>String poolization<ul><li>intern(string)</li></ul></li></ul><pre><code class="python">&gt;&gt;&gt; a=258;print hex(id(a))0x6000838f8&gt;&gt;&gt; b=258;print hex(id(b))0x60007bfd8&gt;&gt;&gt; a is bFalse&gt;&gt;&gt; a=-6;print hex(id(a))0x60007c008&gt;&gt;&gt; b=-6;print hex(id(b))0x6000838f8&gt;&gt;&gt; a is bFalse&gt;&gt;&gt; a=37;print hex(id(a))0x600028c40&gt;&gt;&gt; b=37;print hex(id(a))0x600028c40&gt;&gt;&gt; a is bTrue&gt;&gt;&gt; a=1001;b=1001;print hex(id(a));print hex(id(b)); a is b;0x6000838e00x6000838e0True</code></pre><h1 id="golang"><a href="#golang" class="headerlink" title="== golang =="></a>== golang ==</h1><ul><li>TBD. The memory model of golang is something differents with other programming language.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>operator in Java/Python/Go/Javascript</title>
      <link href="/2015/02/01/2015-02-01-Operator-In-Java-Python-Go-JS/"/>
      <url>/2015/02/01/2015-02-01-Operator-In-Java-Python-Go-JS/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">Operator</th><th style="text-align:left">Java</th><th style="text-align:center">Go</th><th style="text-align:center">Python</th><th style="text-align:left">Javascript</th></tr></thead><tbody><tr><td style="text-align:left">++, –</td><td style="text-align:left">statement</td><td style="text-align:center">not statement, expression</td><td style="text-align:center">N/A</td><td style="text-align:left">supported</td></tr><tr><td style="text-align:left">logical</td><td style="text-align:left">&amp;,&#124;,&amp;&amp;,&#124;&#124;,!</td><td style="text-align:center">&amp;&amp;,&#124;&#124;,!</td><td style="text-align:center">and, or, not</td><td style="text-align:left">&amp;&amp;,&#124;&#124;,!</td></tr><tr><td style="text-align:left">bitwise not</td><td style="text-align:left">~x</td><td style="text-align:center">^x</td><td style="text-align:center">~x</td><td style="text-align:left">~x</td></tr><tr><td style="text-align:left">bitwise and</td><td style="text-align:left">x &amp; y</td><td style="text-align:center">x &amp; y</td><td style="text-align:center">x &amp; y</td><td style="text-align:left">x &amp; y</td></tr><tr><td style="text-align:left">bitwise or</td><td style="text-align:left">x &#124; y</td><td style="text-align:center">x &#124; y</td><td style="text-align:center">x &#124; y</td><td style="text-align:left">x &#124; y</td></tr><tr><td style="text-align:left">bitwise exclusive or</td><td style="text-align:left">x ^ y</td><td style="text-align:center">x ^ y</td><td style="text-align:center">x ^ y</td><td style="text-align:left">x ^ y</td></tr><tr><td style="text-align:left">bitwise clear (and not)</td><td style="text-align:left">N/A</td><td style="text-align:center">&amp;^</td><td style="text-align:center">N/A</td><td style="text-align:left">N/A</td></tr><tr><td style="text-align:left">?: (ternary op)</td><td style="text-align:left">supported</td><td style="text-align:center">N/A</td><td style="text-align:center">N/A</td><td style="text-align:left">supported</td></tr></tbody></table><ul><li>Java: <code>&amp;, |</code> also have the logical function. But it differents with <code>&amp;&amp;, ||</code> which have short circuiting function.</li><li>javascript special operator<ul><li>instanceof: Test object class</li><li>in: Test whether property exists, <code>prop in objectName</code><ul><li>in object: test property whether in object</li><li><strong> in array</strong>: test index (not element) whether in array<pre><code>var testInArray = [7, 8, 9];&quot;0&quot; in testInArray; // true1 in testInArray; // true&quot;7&quot; in testInArray; // false8 in testInArray; // false</code></pre></li></ul></li><li>delete: Remove a property</li><li>typeof: Determine type of operand</li><li>void: return undefined value</li><li><code>&gt;&gt;&gt;</code>: Shift right with zero extension</li><li>===, !== : Test for strict equality/inequality, type and value should be tested.</li><li>!!x: get equality of boolean of x</li></ul></li><li>go<ul><li>++, –: only supports post increment/decrement</li></ul></li></ul><pre><code class="java">/*** java ***/Int demoInt2 = demoInt1++++demoInt1- x ==y, x != y // value equals or not- x.equals(y) // same object</code></pre><pre><code class="python">### python ###&gt;&gt;&gt;a**b == pow(a, b)&gt;&gt;&gt;(a//b, a%b) == (a//b, a%b) == divmod(a, b)&gt;&gt;&gt; x == y, x !=y  # value equals or not, check __eq__&gt;&gt;&gt; x is y, x is not y  # same object or not, check pointerx in y, x not in y&gt;&gt;&gt; abs(-5) == 5True&gt;&gt;&gt; a = 2&gt;&gt;&gt; ~a&gt;&gt;&gt; from struct import pack&gt;&gt;&gt; pack(&#39;b&#39;, -1)&#39;\xff&#39;# build-in function for sequence, dictmin(), max(), sum(), cmp()</code></pre><pre><code class="golang">/*** go ***/demoInt2 := demoInt1++ // syntax error++demoInt1 //syntax errorx := 2x, ^x   // 0010 -&gt; 1101 -&gt; (1101 -1) -&gt; 1100 -&gt; 1011</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>set in Java/Python/Go/Javascript</title>
      <link href="/2015/01/29/2015-01-29-Set-In-Java-Python-Go-JS/"/>
      <url>/2015/01/29/2015-01-29-Set-In-Java-Python-Go-JS/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">Set</th><th style="text-align:left">Java</th><th style="text-align:left">Python</th><th style="text-align:left">Go</th></tr></thead><tbody><tr><td style="text-align:left">type</td><td style="text-align:left">Set&lt;…&gt;, HashSet, etc</td><td style="text-align:left">set</td><td style="text-align:left">N/A</td></tr><tr><td style="text-align:left">package</td><td style="text-align:left">import Set</td><td style="text-align:left">primitive</td><td style="text-align:left">N/A</td></tr><tr><td style="text-align:left">mutable</td><td style="text-align:left">Y</td><td style="text-align:left">Y</td><td style="text-align:left">N/A</td></tr></tbody></table><h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><ul><li>Set is not sequence, cannot be got by index and slicing</li><li>python<ul><li>frozenset is immutable set</li></ul></li><li>go<ul><li>No primitive set and related lib</li></ul></li></ul><h1 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h1><pre><code class="python">### python #### createdemoset = set()demoset = set(list) # input args is sequencedemoset.add(element)# retrievedemoset.pop()# updatedemoset.update(other_set) # merge# deletedemoset.remove(element)demoset.discard(element)# others&amp;, |, -, ^==, !=, &gt;, &gt;=, &lt;, &lt;=</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>map in Java/Python/Go/Javascript</title>
      <link href="/2015/01/22/2015-01-22-Map-In-Java-Python-Go-JS/"/>
      <url>/2015/01/22/2015-01-22-Map-In-Java-Python-Go-JS/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">Map</th><th style="text-align:left">Java</th><th style="text-align:left">Python</th><th style="text-align:left">Go</th></tr></thead><tbody><tr><td style="text-align:left">type</td><td style="text-align:left">Map&lt;…&gt;, HashMap, etc</td><td style="text-align:left">dict</td><td style="text-align:left">Map</td></tr><tr><td style="text-align:left">package</td><td style="text-align:left">import Map</td><td style="text-align:left">primitive</td><td style="text-align:left">primitive</td></tr><tr><td style="text-align:left">mutable</td><td style="text-align:left">Y</td><td style="text-align:left">Y</td><td style="text-align:left">Y</td></tr></tbody></table><h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><ul><li><p>java</p></li><li><p>python</p><ul><li>OrderedDict</li></ul></li></ul><h1 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h1><pre><code class="python">### python #### createdemodict = {} # empty dictdemodict = {&#39;a&#39;:&#39;1&#39;, &#39;b&#39;:&#39;2&#39;}demodict = dict(a=1, b=2)demood = OrderedDict()# retrievedemodict.get(key)  # absent returns Nonedemodict.get(key, default)demodict.keys(), demodict.values(), demodict.items()demodict.iterkeys(), demodict.itervalues(), demodict.iteritems()     # updatedemodict[key] = new_valuedemodict.update(otherdict) # mergedemodict.setdefault(key, value) # return existing value of key or new value of new key# deletedemodict.pop(key), demodict.popitem()del demodict[key]# others #&gt;&gt;&gt; &quot;b&quot; in demodictTruedemodict.viewitems() # return type dict_items for set operation &amp;(intersaction), | (union), -(difference), ^ (symmetric difference) # Convert #&gt;&gt;&gt; list = [(1,2), (3,4)]&gt;&gt;&gt; list[(1, 2), (3, 4)]&gt;&gt;&gt; dict((x,y) for x,y in list){1: 2, 3: 4}</code></pre><pre><code class="golang">/*** go ***/// createvar demoMap map[string] demoStructdemoMap = make(map[string], demoStruct, &lt;initCap&gt;) # initCap is optional// retrievevalue, ok := demoMap[key]// updatedemoMap[key] = value// deletedelete(demoMap, key)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>list in Java/Python/Go/Javascript</title>
      <link href="/2015/01/15/2015-01-15-List-In-Java-Python-Go-JS/"/>
      <url>/2015/01/15/2015-01-15-List-In-Java-Python-Go-JS/</url>
      
        <content type="html"><![CDATA[<ul><li>Data structure stores a sequence of items in a list</li></ul><table><thead><tr><th style="text-align:left">List</th><th style="text-align:left">Java</th><th style="text-align:left">Python</th><th style="text-align:left">Go</th></tr></thead><tbody><tr><td style="text-align:left">type</td><td style="text-align:left">List&lt;…&gt;, Arraylist, LinkedList</td><td style="text-align:left">list</td><td style="text-align:left">List</td></tr><tr><td style="text-align:left">package</td><td style="text-align:left">import List</td><td style="text-align:left">primitive</td><td style="text-align:left">container/list</td></tr><tr><td style="text-align:left">element type</td><td style="text-align:left">hybrid: <code>List&lt;Object&gt;</code></td><td style="text-align:left">hybrid</td><td style="text-align:left">hybrid: interface{}</td></tr><tr><td style="text-align:left">mutable</td><td style="text-align:left">Y</td><td style="text-align:left">Y</td><td style="text-align:left">Y</td></tr></tbody></table><h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><ul><li>java<ul><li>LinkedList</li><li>ArrayList: efficient in random access, not synchronized (Vector is)</li></ul></li><li>python<ul><li>Tuple: an special immutable list analog. Its immutable and readonly characteristic is good for concurrent programming</li><li>namedtuple</li></ul></li></ul><pre><code class="python">&gt;&gt;&gt; demoTuple = () # empty tuple&gt;&gt;&gt; demoTule = (1, 2)&gt;&gt;&gt; demoTuple = (1,) # Note, commar is needed# namedtuple&gt;&gt;&gt; User = namedtuple(&quot;User&quot;, &quot;name age&quot;)&gt;&gt;&gt; u = User(&quot;user1&quot;, 10)</code></pre><ul><li>go<ul><li>Element is a structure with next, previous pointer</li></ul></li></ul><h1 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h1><pre><code class="java">/*** Java ***/// createList&lt;String&gt; demoList = new ArrayList&lt;String&gt;();demoList.add(element)  // new element is added in the end of listiter.add(element)      // new element is added before position of iterator// updatedemoList.set(idx)iter.set(newElement)// retrievedemoList.get(idx) // low efficiency in random access, can use array or ArrayListIterator iter = demoList.iterator();listIterator iter = demoList.listIterator(); // listIterator extends Iterator&lt;E&gt; with previous()iter.next()// deleteiter.remove() // remove last visited item// othersdemoList.contains(item)</code></pre><pre><code class="python">### python #### createdemolist = [] # empty list, len(demolist) = 0demolist = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]demolist = [x for x in range(3)]# updatedemolist[idx] = new_itemdemolist.append(item), demolist.insert(idx, sth)demolist.expand(other_list) # merge lists# retrievedemolist[i] # range: 0-len(demolist) ~ len(demolist) - 1# Deletedemolist.pop(), demolist.pop(idx), demolist.remove(item)# otherlen(demolist)demolist.count(item)demolist.index(item, position)demolist[1:-3] # slice# conversiondemoarray = array.array(&quot;l&quot;, range(3))                         |--- typecode (must be c, b, B, u, h, H, i, I, l, L, f or d)&gt;&gt;&gt; type(demoarray)&lt;type &#39;array.array&#39;&gt;list = demoarray.tolist()demoarray.fromlist(demolist)</code></pre><pre><code class="golang">/*** Go ***/// createdemoList = list.New()demoList.PushFront(element), demoList.PushBack(element)// retrievedemoElement := demoList.Front(), demoList.Back()// updatedemoList.InsertAfter(element), demoList.InsertBefore(element)// deletedemoList.Remove(element)// ElementdemoElement.ValuedemoElement.Next(), demoElement.Prev()</code></pre>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>string in Java/Python/Go/Javascript</title>
      <link href="/2015/01/08/2015-01-08-String-In-Java-Python-Go-JS/"/>
      <url>/2015/01/08/2015-01-08-String-In-Java-Python-Go-JS/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">Item</th><th style="text-align:left">Java</th><th style="text-align:left">Python</th><th style="text-align:left">Go</th><th style="text-align:left">Javascript</th></tr></thead><tbody><tr><td style="text-align:left">type</td><td style="text-align:left">String</td><td style="text-align:left">str/unicode</td><td style="text-align:left">string</td><td style="text-align:left">N/A</td></tr><tr><td style="text-align:left">package</td><td style="text-align:left">import String</td><td style="text-align:left">primitive</td><td style="text-align:left">primitive</td><td style="text-align:left">N/A</td></tr><tr><td style="text-align:left">charset encoding</td><td style="text-align:left">determined by os</td><td style="text-align:left">ascii</td><td style="text-align:left">utf-8, unicode(rune)</td><td style="text-align:left">UCS-2</td></tr><tr><td style="text-align:left">immutable</td><td style="text-align:left">Y</td><td style="text-align:left">Y</td><td style="text-align:left">Y</td><td style="text-align:left">Y</td></tr></tbody></table><ul><li><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a37629844456ca7e5a7faa9b94ee8000" target="_blank" rel="noopener">ascii, unicode, utf-8</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/12/unicode.html" target="_blank" rel="noopener">Unicode &amp; Javascript, history of UCS-2 w/ UTF16</a></li></ul><pre><code class="python">#!/usr/bin/env python# -*- coding: utf-8 -*-## Ascii Tools&gt;&gt;&gt; ord(&#39;A&#39;)65&gt;&gt;&gt; chr(65)&#39;A&#39;</code></pre><h1 id="Declaration-amp-Initialization"><a href="#Declaration-amp-Initialization" class="headerlink" title="Declaration &amp; Initialization"></a>Declaration &amp; Initialization</h1><pre><code class="java">// JavaString demoA = null;String demoB = &quot;&quot;;</code></pre><pre><code class="python"># python# Prefer using single quote for chardemoA = &#39;It\&#39;s a demo A.&#39;# Prefer using double quote for string to align with other languagedemoB = &quot;It\&#39;s a demo B.&quot;chinese = &quot;中文&quot;   #utf-8uchinese = u&quot;中文&quot; #unicode&gt;&gt;&gt; demoC = &quot;&quot;&quot; It&#39;s a... demo... C... &quot;&quot;&quot;&gt;&gt;&gt; demoC&quot; It&#39;s a \ndemo \nC\n&quot;&gt;&gt;&gt; r&quot;It\&#39;s demo&quot;&quot;It\\&#39;s demo&quot;&gt;&gt;&gt; type(demoA)&lt;type &#39;str&#39;&gt;&gt;&gt;&gt; del demoC</code></pre><pre><code class="golang">// Govar demoA string;demoB := &quot;It&#39;s a demoB&quot;</code></pre><pre><code class="javascript">// Javascriptvar demoStr = &quot;demo string&quot;var demoStr1 = &#39;demo string&#39;  // signle quotevar demoStr = &quot;demo string&quot;   // double quotevar demoChar = &#39;a&#39;   // no char type in JS, use sigle character in string to present charvar demoPath = &quot;\/home\/kasper&quot;  // escapevar demoUnicode = &#39;\u4e2d\u6587&#39;;  // unicode &#39;中文&#39;ES6 - multi-line - `...`` This is  multi-line  string    `</code></pre><h1 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h1><pre><code class="java">=== encoding ===// javaSystem.getProperties().getProperty(&quot;file.encoding&quot;)</code></pre><pre><code class="python"># pythonsys.getdefaultencoding()sys.setdefaultencoding(&quot;utf-8&quot;)encode(arg1) # encode to specific encoding arg1, e.g. &quot;utf-8&quot;, &quot;gb2312&quot;decode() # -&gt; unicode### basic operations #### python&quot;a&quot; + &quot;b&quot;, &quot;-&quot;.join([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;])&quot;a-b-c&quot;.split(&quot;-&quot;), &quot;a\nb\nc&quot;.splitlines() or splitlines(True)startwith(), endwith()lower(), upper()strip(), lstrip(), rstrip()replace(), find&gt;&gt;&gt; &quot;a&quot; * 3&#39;aaa&#39;</code></pre><pre><code class="golang">// gostr1 + str2 // string concatinationlen(s)        // get length of stringstr1[i]       // get char from stringfor i, ch := range str {...}</code></pre><pre><code class="javascript">// Javascriptstr1 = &#39;\u0041&#39; // or double quota &quot;\u0041&quot;str1 += str2;str.length  // string length is attribute. In Java, length() is methodstr.toUpperCase()str1 === str2str2[0] // &#39;H&#39;str2.indexOf(&#39;World&#39;)  // 6str2.substring(0, 5);  // Hello, range not include 5str2.substring(6);  // World</code></pre><h1 id="format"><a href="#format" class="headerlink" title="format"></a>format</h1><pre><code class="java">// java</code></pre><pre><code class="python"># python# support as format in C# %[(key)][flags(-(left alignment)/+/#(i.e. #c, #X) etc)][width][.precision]typecode(d/f/s/x etc)# %% uses for &#39;%&#39; escape&gt;&gt;&gt; &quot;%(key)s=%(value)d&quot; % dict(key = &quot;a&quot;, value = 10)&#39;a=10&#39;# format for container objects: list, dict{field!convertflag:formatspec: [[fill]align][sign][#][0][width][.precision][typecode]}&gt;&gt;&gt;&quot;test {demo}&quot;.format(demo=&quot;Kasper&quot;)&#39;test Kasper&#39;</code></pre><pre><code class="golang">// go// %d, %f, %s, %x, %cfmt.Printf(&quot;The length of \&quot;%s\&quot; is %d \n&quot;, str, len(str))</code></pre><p>hex(id(x)) - return obj id - memory address</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>type system in Java/Python/Go/Javascript</title>
      <link href="/2015/01/02/2015-01-02-Type-System-In-Java-Python-Go-JS/"/>
      <url>/2015/01/02/2015-01-02-Type-System-In-Java-Python-Go-JS/</url>
      
        <content type="html"><![CDATA[<h1 id="Type-determination"><a href="#Type-determination" class="headerlink" title="Type determination"></a>Type determination</h1><ul><li>java interface query:<ul><li>interfaceDemo <code>instanceof</code> InterfaceDemo</li><li>subClassInstance <code>instanceof</code> ParentClass</li></ul></li><li>python<ul><li>isinstance</li></ul></li><li>golang interface query:  <ul><li>value, ok := element.(T)    <code>element is interface var, T is base type</code></li><li>switch value := element.(type)</li></ul></li></ul><h1 id="Cast"><a href="#Cast" class="headerlink" title="Cast"></a>Cast</h1><ul><li>golang not support implicit type cast</li><li>tuncation<ul><li>small type casts to large type is safe</li><li>large -&gt; small causes tuncations, only keeps the data in low address. The situation depends on what saves in low address (big-endian/little-endian)</li></ul></li></ul><pre><code>/*** java ***/double doubleDemo = 0.1d;int intDemo = (int) doubleDemo ;{% endhighlight %}{% highlight python %}### python ###&gt;&gt;&gt; type(str(123))&lt;type &#39;str&#39;&gt;&gt;&gt;&gt; bin(17), int(&#39;0b10001&#39;, 2)&gt;&gt;&gt; oct(20), int(&#39;024&#39;, 8)&gt;&gt;&gt; hex(22), int(&#39;0x16&#39;, 16)# suuport string ~ container(list, tuple, dict, set) conversion&gt;&gt;&gt; str([0, 1, 2]), eval(&quot;[0, 1, 2]&quot;)</code></pre><pre><code>/*** go ***/var int32Demo int32 = 12345var int64Demo int64 = int64(int32Demo)switch value := element.(type) {case string:   ...case []byte:case int:default:}</code></pre><h1 id="Primitive"><a href="#Primitive" class="headerlink" title="Primitive"></a>Primitive</h1><ul><li>Java:<ul><li>null</li><li>boolean, byte, char(2 bytes), short, int, long, float, double</li><li>fraction literal is double by default. e.g. 3.14 is double type</li></ul></li><li>Python: everything is object<ul><li>None</li><li>bool</li><li>int, long, float, complex</li><li>sequence: str, unicode, list, tuple</li><li>dict</li><li>set, frozenset</li></ul></li></ul><pre><code>&gt;&gt;&gt; map(bool, [None, 0, &quot;&quot;, u&quot;&quot;, list(), tuple(), dict(), set(), frozenset()])[False, False, False, False, False, False, False, False, False]&gt;&gt;&gt; int(True), int(False)(1, 0)</code></pre><ul><li>Go:<ul><li>nil</li><li>bool</li><li>int8, uint8, int16, int32, int64, int, uint, uintptr</li><li>float32, float64</li><li>complex64, complex128</li><li>string</li><li>byte(utf-8), rune(unicode), <strong>no char</strong></li><li>error</li><li>compound type: array, slice, map, chan, struct, pointer, interface</li></ul></li></ul><pre><code>demoInt := 2if demoInt {        fmt.Println(&quot;int value can be used by if&quot;)}error output: non-bool demoInt (type int) used as if condition</code></pre><ul><li>Javascript:<ul><li>primitive type<ul><li>undefined: undefined</li><li>null: null - can be treated as a specifal value of Object</li><li>boolean: true, false</li><li>number: double (64bits, 8 bytes), NaN, Infinity</li><li>string: UTF16</li></ul></li><li>object type<ul><li>Object<ul><li>wrapper: Number, Boolean, String</li></ul></li></ul></li></ul></li></ul><pre><code>var n = 1, b = true, s = &quot;test&quot;var Num = new Number(n);var Boo = new Boolean(b);var Str = new String(s);</code></pre><ul><li>check by typeof()</li><li>Object type (wrapper for primitive) has methods, except null and undefined</li></ul>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> programming </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
